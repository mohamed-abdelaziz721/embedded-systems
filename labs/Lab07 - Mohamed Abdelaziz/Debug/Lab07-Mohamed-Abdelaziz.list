
Lab07-Mohamed-Abdelaziz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000468  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005fc  080005fc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005fc  080005fc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080005fc  080005fc  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005fc  080005fc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005fc  080005fc  000105fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000600  08000600  00010600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08000604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000005c  08000660  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08000660  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000133f  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005a8  00000000  00000000  000213cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  00021978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001a8  00000000  00000000  00021b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000011a3  00000000  00000000  00021d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001a55  00000000  00000000  00022ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007dd40  00000000  00000000  00024918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a2658  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005f8  00000000  00000000  000a26ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000005c 	.word	0x2000005c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080005e4 	.word	0x080005e4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000060 	.word	0x20000060
 80001d0:	080005e4 	.word	0x080005e4

080001d4 <GPIO_Init>:
#define PUPD_MASK   0x03
#define PUPD_SHIFT  0x01
#define OTYPE_MASK  0x01

void GPIO_Init(int Port, char pin_no, char Direction, char state)
{
 80001d4:	b490      	push	{r4, r7}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	4608      	mov	r0, r1
 80001de:	4611      	mov	r1, r2
 80001e0:	461a      	mov	r2, r3
 80001e2:	4603      	mov	r3, r0
 80001e4:	70fb      	strb	r3, [r7, #3]
 80001e6:	460b      	mov	r3, r1
 80001e8:	70bb      	strb	r3, [r7, #2]
 80001ea:	4613      	mov	r3, r2
 80001ec:	707b      	strb	r3, [r7, #1]
    Port -= 'A'; //   User enters 'A' or 'B' --> *LookUp[0][reg] or * LookUp[1][reg]
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	3b41      	subs	r3, #65	; 0x41
 80001f2:	607b      	str	r3, [r7, #4]

    *LookUp[Port][CLOCK]|= 1<<Port; // Enable Clock
 80001f4:	4a5b      	ldr	r2, [pc, #364]	; (8000364 <GPIO_Init+0x190>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	212c      	movs	r1, #44	; 0x2c
 80001fa:	fb01 f303 	mul.w	r3, r1, r3
 80001fe:	4413      	add	r3, r2
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	681a      	ldr	r2, [r3, #0]
 8000204:	2101      	movs	r1, #1
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	fa01 f303 	lsl.w	r3, r1, r3
 800020c:	461c      	mov	r4, r3
 800020e:	4955      	ldr	r1, [pc, #340]	; (8000364 <GPIO_Init+0x190>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	202c      	movs	r0, #44	; 0x2c
 8000214:	fb00 f303 	mul.w	r3, r0, r3
 8000218:	440b      	add	r3, r1
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4322      	orrs	r2, r4
 800021e:	601a      	str	r2, [r3, #0]
    
    *LookUp[Port][MODER] &= ~(0X03 << (2 * pin_no));    
 8000220:	4a50      	ldr	r2, [pc, #320]	; (8000364 <GPIO_Init+0x190>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	212c      	movs	r1, #44	; 0x2c
 8000226:	fb01 f303 	mul.w	r3, r1, r3
 800022a:	4413      	add	r3, r2
 800022c:	3304      	adds	r3, #4
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	681a      	ldr	r2, [r3, #0]
 8000232:	78fb      	ldrb	r3, [r7, #3]
 8000234:	005b      	lsls	r3, r3, #1
 8000236:	2103      	movs	r1, #3
 8000238:	fa01 f303 	lsl.w	r3, r1, r3
 800023c:	43db      	mvns	r3, r3
 800023e:	461c      	mov	r4, r3
 8000240:	4948      	ldr	r1, [pc, #288]	; (8000364 <GPIO_Init+0x190>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	202c      	movs	r0, #44	; 0x2c
 8000246:	fb00 f303 	mul.w	r3, r0, r3
 800024a:	440b      	add	r3, r1
 800024c:	3304      	adds	r3, #4
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4022      	ands	r2, r4
 8000252:	601a      	str	r2, [r3, #0]
    *LookUp[Port][MODER] |= (Direction << (2 * pin_no));
 8000254:	4a43      	ldr	r2, [pc, #268]	; (8000364 <GPIO_Init+0x190>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	212c      	movs	r1, #44	; 0x2c
 800025a:	fb01 f303 	mul.w	r3, r1, r3
 800025e:	4413      	add	r3, r2
 8000260:	3304      	adds	r3, #4
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	78b9      	ldrb	r1, [r7, #2]
 8000268:	78fb      	ldrb	r3, [r7, #3]
 800026a:	005b      	lsls	r3, r3, #1
 800026c:	fa01 f303 	lsl.w	r3, r1, r3
 8000270:	461c      	mov	r4, r3
 8000272:	493c      	ldr	r1, [pc, #240]	; (8000364 <GPIO_Init+0x190>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	202c      	movs	r0, #44	; 0x2c
 8000278:	fb00 f303 	mul.w	r3, r0, r3
 800027c:	440b      	add	r3, r1
 800027e:	3304      	adds	r3, #4
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4322      	orrs	r2, r4
 8000284:	601a      	str	r2, [r3, #0]

    /*  case input User enters: NO_PULL (0) or PULL_UP (2) or PULL_DOWN (4)  */
    /*  state is shifted by 1 to make the value 0 ,1 & 2  (First bit is for otype)  */
    *LookUp[Port][PUPDR] &= ~(0X03 << (2 * pin_no));
 8000286:	4a37      	ldr	r2, [pc, #220]	; (8000364 <GPIO_Init+0x190>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	212c      	movs	r1, #44	; 0x2c
 800028c:	fb01 f303 	mul.w	r3, r1, r3
 8000290:	4413      	add	r3, r2
 8000292:	3310      	adds	r3, #16
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	681a      	ldr	r2, [r3, #0]
 8000298:	78fb      	ldrb	r3, [r7, #3]
 800029a:	005b      	lsls	r3, r3, #1
 800029c:	2103      	movs	r1, #3
 800029e:	fa01 f303 	lsl.w	r3, r1, r3
 80002a2:	43db      	mvns	r3, r3
 80002a4:	461c      	mov	r4, r3
 80002a6:	492f      	ldr	r1, [pc, #188]	; (8000364 <GPIO_Init+0x190>)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	202c      	movs	r0, #44	; 0x2c
 80002ac:	fb00 f303 	mul.w	r3, r0, r3
 80002b0:	440b      	add	r3, r1
 80002b2:	3310      	adds	r3, #16
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4022      	ands	r2, r4
 80002b8:	601a      	str	r2, [r3, #0]
    *LookUp[Port][PUPDR] |= (( (state >> PUPD_SHIFT) & PUPD_MASK) << (2 * pin_no));
 80002ba:	4a2a      	ldr	r2, [pc, #168]	; (8000364 <GPIO_Init+0x190>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	212c      	movs	r1, #44	; 0x2c
 80002c0:	fb01 f303 	mul.w	r3, r1, r3
 80002c4:	4413      	add	r3, r2
 80002c6:	3310      	adds	r3, #16
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	787b      	ldrb	r3, [r7, #1]
 80002ce:	085b      	lsrs	r3, r3, #1
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	f003 0103 	and.w	r1, r3, #3
 80002d6:	78fb      	ldrb	r3, [r7, #3]
 80002d8:	005b      	lsls	r3, r3, #1
 80002da:	fa01 f303 	lsl.w	r3, r1, r3
 80002de:	461c      	mov	r4, r3
 80002e0:	4920      	ldr	r1, [pc, #128]	; (8000364 <GPIO_Init+0x190>)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	202c      	movs	r0, #44	; 0x2c
 80002e6:	fb00 f303 	mul.w	r3, r0, r3
 80002ea:	440b      	add	r3, r1
 80002ec:	3310      	adds	r3, #16
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4322      	orrs	r2, r4
 80002f2:	601a      	str	r2, [r3, #0]
    
    /*  case output User enters: PUSH_PULL(0) or OPEN_DRAIN(1)  */
    /*  state is anded by 1 to clear the pupdr value  */
    *LookUp[Port][OTYPER]&=~(0x01 << pin_no);
 80002f4:	4a1b      	ldr	r2, [pc, #108]	; (8000364 <GPIO_Init+0x190>)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	212c      	movs	r1, #44	; 0x2c
 80002fa:	fb01 f303 	mul.w	r3, r1, r3
 80002fe:	4413      	add	r3, r2
 8000300:	3308      	adds	r3, #8
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	681a      	ldr	r2, [r3, #0]
 8000306:	78fb      	ldrb	r3, [r7, #3]
 8000308:	2101      	movs	r1, #1
 800030a:	fa01 f303 	lsl.w	r3, r1, r3
 800030e:	43db      	mvns	r3, r3
 8000310:	461c      	mov	r4, r3
 8000312:	4914      	ldr	r1, [pc, #80]	; (8000364 <GPIO_Init+0x190>)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	202c      	movs	r0, #44	; 0x2c
 8000318:	fb00 f303 	mul.w	r3, r0, r3
 800031c:	440b      	add	r3, r1
 800031e:	3308      	adds	r3, #8
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	4022      	ands	r2, r4
 8000324:	601a      	str	r2, [r3, #0]
    *LookUp[Port][OTYPER]|= ((state & OTYPE_MASK)<< pin_no);
 8000326:	4a0f      	ldr	r2, [pc, #60]	; (8000364 <GPIO_Init+0x190>)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	212c      	movs	r1, #44	; 0x2c
 800032c:	fb01 f303 	mul.w	r3, r1, r3
 8000330:	4413      	add	r3, r2
 8000332:	3308      	adds	r3, #8
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	681a      	ldr	r2, [r3, #0]
 8000338:	787b      	ldrb	r3, [r7, #1]
 800033a:	f003 0101 	and.w	r1, r3, #1
 800033e:	78fb      	ldrb	r3, [r7, #3]
 8000340:	fa01 f303 	lsl.w	r3, r1, r3
 8000344:	461c      	mov	r4, r3
 8000346:	4907      	ldr	r1, [pc, #28]	; (8000364 <GPIO_Init+0x190>)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	202c      	movs	r0, #44	; 0x2c
 800034c:	fb00 f303 	mul.w	r3, r0, r3
 8000350:	440b      	add	r3, r1
 8000352:	3308      	adds	r3, #8
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4322      	orrs	r2, r4
 8000358:	601a      	str	r2, [r3, #0]
}
 800035a:	bf00      	nop
 800035c:	3708      	adds	r7, #8
 800035e:	46bd      	mov	sp, r7
 8000360:	bc90      	pop	{r4, r7}
 8000362:	4770      	bx	lr
 8000364:	20000000 	.word	0x20000000

08000368 <GPIO_WritePin>:

void GPIO_WritePin(int Port, char pin_no, char Data)
{
 8000368:	b490      	push	{r4, r7}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	460b      	mov	r3, r1
 8000372:	70fb      	strb	r3, [r7, #3]
 8000374:	4613      	mov	r3, r2
 8000376:	70bb      	strb	r3, [r7, #2]
    Port -= 'A';
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3b41      	subs	r3, #65	; 0x41
 800037c:	607b      	str	r3, [r7, #4]
    if (Data)
 800037e:	78bb      	ldrb	r3, [r7, #2]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d018      	beq.n	80003b6 <GPIO_WritePin+0x4e>
    {
        *LookUp[Port][ODR] |= (0x01<<pin_no);
 8000384:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <GPIO_WritePin+0x8c>)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	212c      	movs	r1, #44	; 0x2c
 800038a:	fb01 f303 	mul.w	r3, r1, r3
 800038e:	4413      	add	r3, r2
 8000390:	3318      	adds	r3, #24
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	78fb      	ldrb	r3, [r7, #3]
 8000398:	2101      	movs	r1, #1
 800039a:	fa01 f303 	lsl.w	r3, r1, r3
 800039e:	461c      	mov	r4, r3
 80003a0:	4914      	ldr	r1, [pc, #80]	; (80003f4 <GPIO_WritePin+0x8c>)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	202c      	movs	r0, #44	; 0x2c
 80003a6:	fb00 f303 	mul.w	r3, r0, r3
 80003aa:	440b      	add	r3, r1
 80003ac:	3318      	adds	r3, #24
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4322      	orrs	r2, r4
 80003b2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        *LookUp[Port][ODR] &= ~(0x01 << pin_no);
    }
}
 80003b4:	e018      	b.n	80003e8 <GPIO_WritePin+0x80>
        *LookUp[Port][ODR] &= ~(0x01 << pin_no);
 80003b6:	4a0f      	ldr	r2, [pc, #60]	; (80003f4 <GPIO_WritePin+0x8c>)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	212c      	movs	r1, #44	; 0x2c
 80003bc:	fb01 f303 	mul.w	r3, r1, r3
 80003c0:	4413      	add	r3, r2
 80003c2:	3318      	adds	r3, #24
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	681a      	ldr	r2, [r3, #0]
 80003c8:	78fb      	ldrb	r3, [r7, #3]
 80003ca:	2101      	movs	r1, #1
 80003cc:	fa01 f303 	lsl.w	r3, r1, r3
 80003d0:	43db      	mvns	r3, r3
 80003d2:	461c      	mov	r4, r3
 80003d4:	4907      	ldr	r1, [pc, #28]	; (80003f4 <GPIO_WritePin+0x8c>)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	202c      	movs	r0, #44	; 0x2c
 80003da:	fb00 f303 	mul.w	r3, r0, r3
 80003de:	440b      	add	r3, r1
 80003e0:	3318      	adds	r3, #24
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4022      	ands	r2, r4
 80003e6:	601a      	str	r2, [r3, #0]
}
 80003e8:	bf00      	nop
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc90      	pop	{r4, r7}
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	20000000 	.word	0x20000000

080003f8 <main>:
void Exti0(void);

unsigned char state =0;

int main(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0

	GPIO_Init( PORTA , 0 , OUTPUT , PUSH_PULL);
 80003fc:	2300      	movs	r3, #0
 80003fe:	2201      	movs	r2, #1
 8000400:	2100      	movs	r1, #0
 8000402:	2041      	movs	r0, #65	; 0x41
 8000404:	f7ff fee6 	bl	80001d4 <GPIO_Init>
	GPIO_Init( PORTB , 0 , INPUT , PULL_UP);
 8000408:	2302      	movs	r3, #2
 800040a:	2200      	movs	r2, #0
 800040c:	2100      	movs	r1, #0
 800040e:	2042      	movs	r0, #66	; 0x42
 8000410:	f7ff fee0 	bl	80001d4 <GPIO_Init>




	RCC_APB2ENR |=(0x4000);//To enable the bus that carry external interrupt
 8000414:	4b0d      	ldr	r3, [pc, #52]	; (800044c <main+0x54>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a0c      	ldr	r2, [pc, #48]	; (800044c <main+0x54>)
 800041a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800041e:	6013      	str	r3, [r2, #0]

    GPIO_SYSCFG_EXTICR1 |=  (0x01<<0);//To enable system configuration port B pin 0 as external interrupt
 8000420:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <main+0x58>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a0a      	ldr	r2, [pc, #40]	; (8000450 <main+0x58>)
 8000426:	f043 0301 	orr.w	r3, r3, #1
 800042a:	6013      	str	r3, [r2, #0]

    EXTI_IMR |=(0x01<<0); //Interrupt request from line zero is not masked
 800042c:	4b09      	ldr	r3, [pc, #36]	; (8000454 <main+0x5c>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a08      	ldr	r2, [pc, #32]	; (8000454 <main+0x5c>)
 8000432:	f043 0301 	orr.w	r3, r3, #1
 8000436:	6013      	str	r3, [r2, #0]

    EXTI_FTSR |=(0x01<<0);//Falling  edge trigger from line 0 enabled
 8000438:	4b07      	ldr	r3, [pc, #28]	; (8000458 <main+0x60>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a06      	ldr	r2, [pc, #24]	; (8000458 <main+0x60>)
 800043e:	f043 0301 	orr.w	r3, r3, #1
 8000442:	6013      	str	r3, [r2, #0]


    NVIC_ISER0 =1<<6;// enable interrupt from NVIC
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <main+0x64>)
 8000446:	2240      	movs	r2, #64	; 0x40
 8000448:	601a      	str	r2, [r3, #0]

    while (1)
 800044a:	e7fe      	b.n	800044a <main+0x52>
 800044c:	40023844 	.word	0x40023844
 8000450:	40013808 	.word	0x40013808
 8000454:	40013c00 	.word	0x40013c00
 8000458:	40013c0c 	.word	0x40013c0c
 800045c:	e000e100 	.word	0xe000e100

08000460 <Exti0>:


  return 0;
}
void Exti0()
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
	if (state ==0)
 8000464:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <Exti0+0x40>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d108      	bne.n	800047e <Exti0+0x1e>
	{
		 GPIO_WritePin( PORTA,0,1 );
 800046c:	2201      	movs	r2, #1
 800046e:	2100      	movs	r1, #0
 8000470:	2041      	movs	r0, #65	; 0x41
 8000472:	f7ff ff79 	bl	8000368 <GPIO_WritePin>
				 state =1;
 8000476:	4b0a      	ldr	r3, [pc, #40]	; (80004a0 <Exti0+0x40>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
 800047c:	e007      	b.n	800048e <Exti0+0x2e>
	}
	else
	{
		GPIO_WritePin( PORTA ,0,0);
 800047e:	2200      	movs	r2, #0
 8000480:	2100      	movs	r1, #0
 8000482:	2041      	movs	r0, #65	; 0x41
 8000484:	f7ff ff70 	bl	8000368 <GPIO_WritePin>
		 state =0;
 8000488:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <Exti0+0x40>)
 800048a:	2200      	movs	r2, #0
 800048c:	701a      	strb	r2, [r3, #0]
	}


	 EXTI_PR |=(0x01<<0);
 800048e:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <Exti0+0x44>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a04      	ldr	r2, [pc, #16]	; (80004a4 <Exti0+0x44>)
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	6013      	str	r3, [r2, #0]
	 // falling the flag by software when the event arrives on the external interrupt line
}
 800049a:	bf00      	nop
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	20000078 	.word	0x20000078
 80004a4:	40013c14 	.word	0x40013c14

080004a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <NMI_Handler+0x4>

080004ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <HardFault_Handler+0x4>

080004b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <MemManage_Handler+0x4>

080004ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004be:	e7fe      	b.n	80004be <BusFault_Handler+0x4>

080004c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <UsageFault_Handler+0x4>

080004c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr

080004d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr

080004e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004f4:	f000 f83e 	bl	8000574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}

080004fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <SystemInit+0x20>)
 8000502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000506:	4a05      	ldr	r2, [pc, #20]	; (800051c <SystemInit+0x20>)
 8000508:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800050c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	e000ed00 	.word	0xe000ed00

08000520 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000520:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000558 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000524:	480d      	ldr	r0, [pc, #52]	; (800055c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000526:	490e      	ldr	r1, [pc, #56]	; (8000560 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000528:	4a0e      	ldr	r2, [pc, #56]	; (8000564 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800052a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800052c:	e002      	b.n	8000534 <LoopCopyDataInit>

0800052e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000532:	3304      	adds	r3, #4

08000534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000538:	d3f9      	bcc.n	800052e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800053a:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800053c:	4c0b      	ldr	r4, [pc, #44]	; (800056c <LoopFillZerobss+0x26>)
  movs r3, #0
 800053e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000540:	e001      	b.n	8000546 <LoopFillZerobss>

08000542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000544:	3204      	adds	r2, #4

08000546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000548:	d3fb      	bcc.n	8000542 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800054a:	f7ff ffd7 	bl	80004fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800054e:	f000 f825 	bl	800059c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000552:	f7ff ff51 	bl	80003f8 <main>
  bx  lr    
 8000556:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000558:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800055c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000560:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000564:	08000604 	.word	0x08000604
  ldr r2, =_sbss
 8000568:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800056c:	20000080 	.word	0x20000080

08000570 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000570:	e7fe      	b.n	8000570 <ADC_IRQHandler>
	...

08000574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <HAL_IncTick+0x20>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	461a      	mov	r2, r3
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <HAL_IncTick+0x24>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4413      	add	r3, r2
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <HAL_IncTick+0x24>)
 8000586:	6013      	str	r3, [r2, #0]
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000058 	.word	0x20000058
 8000598:	2000007c 	.word	0x2000007c

0800059c <__libc_init_array>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	4d0d      	ldr	r5, [pc, #52]	; (80005d4 <__libc_init_array+0x38>)
 80005a0:	4c0d      	ldr	r4, [pc, #52]	; (80005d8 <__libc_init_array+0x3c>)
 80005a2:	1b64      	subs	r4, r4, r5
 80005a4:	10a4      	asrs	r4, r4, #2
 80005a6:	2600      	movs	r6, #0
 80005a8:	42a6      	cmp	r6, r4
 80005aa:	d109      	bne.n	80005c0 <__libc_init_array+0x24>
 80005ac:	4d0b      	ldr	r5, [pc, #44]	; (80005dc <__libc_init_array+0x40>)
 80005ae:	4c0c      	ldr	r4, [pc, #48]	; (80005e0 <__libc_init_array+0x44>)
 80005b0:	f000 f818 	bl	80005e4 <_init>
 80005b4:	1b64      	subs	r4, r4, r5
 80005b6:	10a4      	asrs	r4, r4, #2
 80005b8:	2600      	movs	r6, #0
 80005ba:	42a6      	cmp	r6, r4
 80005bc:	d105      	bne.n	80005ca <__libc_init_array+0x2e>
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005c4:	4798      	blx	r3
 80005c6:	3601      	adds	r6, #1
 80005c8:	e7ee      	b.n	80005a8 <__libc_init_array+0xc>
 80005ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ce:	4798      	blx	r3
 80005d0:	3601      	adds	r6, #1
 80005d2:	e7f2      	b.n	80005ba <__libc_init_array+0x1e>
 80005d4:	080005fc 	.word	0x080005fc
 80005d8:	080005fc 	.word	0x080005fc
 80005dc:	080005fc 	.word	0x080005fc
 80005e0:	08000600 	.word	0x08000600

080005e4 <_init>:
 80005e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005e6:	bf00      	nop
 80005e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ea:	bc08      	pop	{r3}
 80005ec:	469e      	mov	lr, r3
 80005ee:	4770      	bx	lr

080005f0 <_fini>:
 80005f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005f2:	bf00      	nop
 80005f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005f6:	bc08      	pop	{r3}
 80005f8:	469e      	mov	lr, r3
 80005fa:	4770      	bx	lr


lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000540  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080006d4  080006d4  000106d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080006e0  080006e0  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080006e0  080006e0  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006e0  080006e0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006e0  080006e0  000106e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006e4  080006e4  000106e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080006e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000014  080006fc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  080006fc  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c27  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004a9  00000000  00000000  00020c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000108  00000000  00000000  00021118  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000b0  00000000  00000000  00021220  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000df35  00000000  00000000  000212d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000017ec  00000000  00000000  0002f205  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004f9f4  00000000  00000000  000309f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000803e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000258  00000000  00000000  00080460  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080006bc 	.word	0x080006bc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	080006bc 	.word	0x080006bc

080001d4 <GPIO_EnableClock>:




void GPIO_EnableClock(unsigned char Port_id)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
     if (Port_id == 0)
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d106      	bne.n	80001f2 <GPIO_EnableClock+0x1e>
     {
    	 GPIO_REG(0x40023800,0x30) |= (0x01 << 0);
 80001e4:	4b0a      	ldr	r3, [pc, #40]	; (8000210 <GPIO_EnableClock+0x3c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a09      	ldr	r2, [pc, #36]	; (8000210 <GPIO_EnableClock+0x3c>)
 80001ea:	f043 0301 	orr.w	r3, r3, #1
 80001ee:	6013      	str	r3, [r2, #0]
     else if(Port_id == 1)
     {
    	 GPIO_REG(0x40023800,0x30) |= (0x01 << 1);
     };

}
 80001f0:	e008      	b.n	8000204 <GPIO_EnableClock+0x30>
     else if(Port_id == 1)
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	2b01      	cmp	r3, #1
 80001f6:	d105      	bne.n	8000204 <GPIO_EnableClock+0x30>
    	 GPIO_REG(0x40023800,0x30) |= (0x01 << 1);
 80001f8:	4b05      	ldr	r3, [pc, #20]	; (8000210 <GPIO_EnableClock+0x3c>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <GPIO_EnableClock+0x3c>)
 80001fe:	f043 0302 	orr.w	r3, r3, #2
 8000202:	6013      	str	r3, [r2, #0]
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr
 8000210:	40023830 	.word	0x40023830

08000214 <GPIO_Init>:

void GPIO_Init(unsigned char port_id, unsigned char PinNum, unsigned char PinMode,unsigned char DefaultState)
{
 8000214:	b490      	push	{r4, r7}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
 800021a:	4604      	mov	r4, r0
 800021c:	4608      	mov	r0, r1
 800021e:	4611      	mov	r1, r2
 8000220:	461a      	mov	r2, r3
 8000222:	4623      	mov	r3, r4
 8000224:	71fb      	strb	r3, [r7, #7]
 8000226:	4603      	mov	r3, r0
 8000228:	71bb      	strb	r3, [r7, #6]
 800022a:	460b      	mov	r3, r1
 800022c:	717b      	strb	r3, [r7, #5]
 800022e:	4613      	mov	r3, r2
 8000230:	713b      	strb	r3, [r7, #4]

      // Configure moder register for pin direction

	  // configure mode of the bin (input - output----)

	 GPIO_MODER(port_id) &= ~(0x03 << 2 * PinNum);
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	4a3b      	ldr	r2, [pc, #236]	; (8000324 <GPIO_Init+0x110>)
 8000236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	79ba      	ldrb	r2, [r7, #6]
 800023e:	0052      	lsls	r2, r2, #1
 8000240:	2103      	movs	r1, #3
 8000242:	fa01 f202 	lsl.w	r2, r1, r2
 8000246:	43d2      	mvns	r2, r2
 8000248:	4610      	mov	r0, r2
 800024a:	79fa      	ldrb	r2, [r7, #7]
 800024c:	4935      	ldr	r1, [pc, #212]	; (8000324 <GPIO_Init+0x110>)
 800024e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000252:	4003      	ands	r3, r0
 8000254:	6013      	str	r3, [r2, #0]
	 GPIO_MODER(port_id) |= PinMode << 2 * PinNum;
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	4a32      	ldr	r2, [pc, #200]	; (8000324 <GPIO_Init+0x110>)
 800025a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	7979      	ldrb	r1, [r7, #5]
 8000262:	79ba      	ldrb	r2, [r7, #6]
 8000264:	0052      	lsls	r2, r2, #1
 8000266:	fa01 f202 	lsl.w	r2, r1, r2
 800026a:	4610      	mov	r0, r2
 800026c:	79fa      	ldrb	r2, [r7, #7]
 800026e:	492d      	ldr	r1, [pc, #180]	; (8000324 <GPIO_Init+0x110>)
 8000270:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000274:	4303      	orrs	r3, r0
 8000276:	6013      	str	r3, [r2, #0]

	 GPIO_TYPER(port_id) &= ~(1 << PinNum);
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	4a2a      	ldr	r2, [pc, #168]	; (8000324 <GPIO_Init+0x110>)
 800027c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000280:	3304      	adds	r3, #4
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	79ba      	ldrb	r2, [r7, #6]
 8000286:	2101      	movs	r1, #1
 8000288:	fa01 f202 	lsl.w	r2, r1, r2
 800028c:	43d2      	mvns	r2, r2
 800028e:	4610      	mov	r0, r2
 8000290:	79fa      	ldrb	r2, [r7, #7]
 8000292:	4924      	ldr	r1, [pc, #144]	; (8000324 <GPIO_Init+0x110>)
 8000294:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000298:	3204      	adds	r2, #4
 800029a:	4003      	ands	r3, r0
 800029c:	6013      	str	r3, [r2, #0]
	 GPIO_TYPER(port_id) |= ((DefaultState & _OUTTYPE_MASK) >> _OUTTYPE_SHIFT) << PinNum;
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	4a20      	ldr	r2, [pc, #128]	; (8000324 <GPIO_Init+0x110>)
 80002a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a6:	3304      	adds	r3, #4
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	793a      	ldrb	r2, [r7, #4]
 80002ac:	f002 0101 	and.w	r1, r2, #1
 80002b0:	79ba      	ldrb	r2, [r7, #6]
 80002b2:	fa01 f202 	lsl.w	r2, r1, r2
 80002b6:	4610      	mov	r0, r2
 80002b8:	79fa      	ldrb	r2, [r7, #7]
 80002ba:	491a      	ldr	r1, [pc, #104]	; (8000324 <GPIO_Init+0x110>)
 80002bc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80002c0:	3204      	adds	r2, #4
 80002c2:	4303      	orrs	r3, r0
 80002c4:	6013      	str	r3, [r2, #0]




     GPIO_PUPDR(port_id) &= ~(0x03 << 2 * PinNum);
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	4a16      	ldr	r2, [pc, #88]	; (8000324 <GPIO_Init+0x110>)
 80002ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ce:	330c      	adds	r3, #12
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	79ba      	ldrb	r2, [r7, #6]
 80002d4:	0052      	lsls	r2, r2, #1
 80002d6:	2103      	movs	r1, #3
 80002d8:	fa01 f202 	lsl.w	r2, r1, r2
 80002dc:	43d2      	mvns	r2, r2
 80002de:	4610      	mov	r0, r2
 80002e0:	79fa      	ldrb	r2, [r7, #7]
 80002e2:	4910      	ldr	r1, [pc, #64]	; (8000324 <GPIO_Init+0x110>)
 80002e4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80002e8:	320c      	adds	r2, #12
 80002ea:	4003      	ands	r3, r0
 80002ec:	6013      	str	r3, [r2, #0]
	 GPIO_PUPDR(port_id) |= ((DefaultState & _PUPD_MASK) >> _PUPD_SHIFT) << (2 * PinNum);
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	4a0c      	ldr	r2, [pc, #48]	; (8000324 <GPIO_Init+0x110>)
 80002f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f6:	330c      	adds	r3, #12
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	793a      	ldrb	r2, [r7, #4]
 80002fc:	1052      	asrs	r2, r2, #1
 80002fe:	f002 0103 	and.w	r1, r2, #3
 8000302:	79ba      	ldrb	r2, [r7, #6]
 8000304:	0052      	lsls	r2, r2, #1
 8000306:	fa01 f202 	lsl.w	r2, r1, r2
 800030a:	4610      	mov	r0, r2
 800030c:	79fa      	ldrb	r2, [r7, #7]
 800030e:	4905      	ldr	r1, [pc, #20]	; (8000324 <GPIO_Init+0x110>)
 8000310:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000314:	320c      	adds	r2, #12
 8000316:	4303      	orrs	r3, r0
 8000318:	6013      	str	r3, [r2, #0]

}
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bc90      	pop	{r4, r7}
 8000322:	4770      	bx	lr
 8000324:	20000000 	.word	0x20000000

08000328 <GPIO_WritePin>:

unsigned char GPIO_WritePin(unsigned char port_id, unsigned char PinNum, unsigned char Data) {
 8000328:	b480      	push	{r7}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	71fb      	strb	r3, [r7, #7]
 8000332:	460b      	mov	r3, r1
 8000334:	71bb      	strb	r3, [r7, #6]
 8000336:	4613      	mov	r3, r2
 8000338:	717b      	strb	r3, [r7, #5]
  unsigned char result;

      if (((GPIO_MODER(port_id) & (0x03 << 2 * PinNum)) >> (2 * PinNum)) == 1)
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	4a22      	ldr	r2, [pc, #136]	; (80003c8 <GPIO_WritePin+0xa0>)
 800033e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	79ba      	ldrb	r2, [r7, #6]
 8000346:	0052      	lsls	r2, r2, #1
 8000348:	2103      	movs	r1, #3
 800034a:	fa01 f202 	lsl.w	r2, r1, r2
 800034e:	401a      	ands	r2, r3
 8000350:	79bb      	ldrb	r3, [r7, #6]
 8000352:	005b      	lsls	r3, r3, #1
 8000354:	fa22 f303 	lsr.w	r3, r2, r3
 8000358:	2b01      	cmp	r3, #1
 800035a:	d12b      	bne.n	80003b4 <GPIO_WritePin+0x8c>
      {
        if (Data)
 800035c:	797b      	ldrb	r3, [r7, #5]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d012      	beq.n	8000388 <GPIO_WritePin+0x60>
        {
        	GPIO_ODR(port_id) |= (1 << PinNum);
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	4a18      	ldr	r2, [pc, #96]	; (80003c8 <GPIO_WritePin+0xa0>)
 8000366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800036a:	3314      	adds	r3, #20
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	79ba      	ldrb	r2, [r7, #6]
 8000370:	2101      	movs	r1, #1
 8000372:	fa01 f202 	lsl.w	r2, r1, r2
 8000376:	4610      	mov	r0, r2
 8000378:	79fa      	ldrb	r2, [r7, #7]
 800037a:	4913      	ldr	r1, [pc, #76]	; (80003c8 <GPIO_WritePin+0xa0>)
 800037c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000380:	3214      	adds	r2, #20
 8000382:	4303      	orrs	r3, r0
 8000384:	6013      	str	r3, [r2, #0]
 8000386:	e012      	b.n	80003ae <GPIO_WritePin+0x86>
        }
        else
        {
        	GPIO_ODR(port_id) &= ~(1 << PinNum);
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	4a0f      	ldr	r2, [pc, #60]	; (80003c8 <GPIO_WritePin+0xa0>)
 800038c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000390:	3314      	adds	r3, #20
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	79ba      	ldrb	r2, [r7, #6]
 8000396:	2101      	movs	r1, #1
 8000398:	fa01 f202 	lsl.w	r2, r1, r2
 800039c:	43d2      	mvns	r2, r2
 800039e:	4610      	mov	r0, r2
 80003a0:	79fa      	ldrb	r2, [r7, #7]
 80003a2:	4909      	ldr	r1, [pc, #36]	; (80003c8 <GPIO_WritePin+0xa0>)
 80003a4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80003a8:	3214      	adds	r2, #20
 80003aa:	4003      	ands	r3, r0
 80003ac:	6013      	str	r3, [r2, #0]
        }
        result = OK;
 80003ae:	2300      	movs	r3, #0
 80003b0:	73fb      	strb	r3, [r7, #15]
 80003b2:	e001      	b.n	80003b8 <GPIO_WritePin+0x90>
      }
      else
      {
        result = NOK;
 80003b4:	2301      	movs	r3, #1
 80003b6:	73fb      	strb	r3, [r7, #15]
      }



  return result;
 80003b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3714      	adds	r7, #20
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	20000000 	.word	0x20000000

080003cc <GPIO_ReadPin>:

unsigned char GPIO_ReadPin(unsigned char port_id, unsigned char PinNum)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	460a      	mov	r2, r1
 80003d6:	71fb      	strb	r3, [r7, #7]
 80003d8:	4613      	mov	r3, r2
 80003da:	71bb      	strb	r3, [r7, #6]
  unsigned char data=0;
 80003dc:	2300      	movs	r3, #0
 80003de:	73fb      	strb	r3, [r7, #15]


      data = (((GPIO_IDR(port_id)) & (1 << PinNum)) >> PinNum);
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	4a0a      	ldr	r2, [pc, #40]	; (800040c <GPIO_ReadPin+0x40>)
 80003e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003e8:	3310      	adds	r3, #16
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	79ba      	ldrb	r2, [r7, #6]
 80003ee:	2101      	movs	r1, #1
 80003f0:	fa01 f202 	lsl.w	r2, r1, r2
 80003f4:	401a      	ands	r2, r3
 80003f6:	79bb      	ldrb	r3, [r7, #6]
 80003f8:	fa22 f303 	lsr.w	r3, r2, r3
 80003fc:	73fb      	strb	r3, [r7, #15]
   return data;
 80003fe:	7bfb      	ldrb	r3, [r7, #15]

}
 8000400:	4618      	mov	r0, r3
 8000402:	3714      	adds	r7, #20
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	20000000 	.word	0x20000000

08000410 <KEYPAD_Init>:

const unsigned char key_pad_map_array[4][3]= {{0x01,0x02,0x03},{0x04,0x05,0x06},{0x07,0x08,0x09},{'*',0x00,'#'}};
static unsigned char key ;


void KEYPAD_Init(void){
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
	 GPIO_EnableClock(1);
 8000416:	2001      	movs	r0, #1
 8000418:	f7ff fedc 	bl	80001d4 <GPIO_EnableClock>
	 unsigned char k ;
	 for(k = 8 ; k<11 ; k++)
 800041c:	2308      	movs	r3, #8
 800041e:	71fb      	strb	r3, [r7, #7]
 8000420:	e008      	b.n	8000434 <KEYPAD_Init+0x24>
	 {
	 GPIO_Init(1, k, OUTPUT,PUSH_PULL);//make port B pins 8,9,10 output
 8000422:	79f9      	ldrb	r1, [r7, #7]
 8000424:	2300      	movs	r3, #0
 8000426:	2201      	movs	r2, #1
 8000428:	2001      	movs	r0, #1
 800042a:	f7ff fef3 	bl	8000214 <GPIO_Init>
	 for(k = 8 ; k<11 ; k++)
 800042e:	79fb      	ldrb	r3, [r7, #7]
 8000430:	3301      	adds	r3, #1
 8000432:	71fb      	strb	r3, [r7, #7]
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	2b0a      	cmp	r3, #10
 8000438:	d9f3      	bls.n	8000422 <KEYPAD_Init+0x12>
	 }
	 unsigned char i ;
	 for (i = 0 ; i<4 ; i++){
 800043a:	2300      	movs	r3, #0
 800043c:	71bb      	strb	r3, [r7, #6]
 800043e:	e008      	b.n	8000452 <KEYPAD_Init+0x42>
	 GPIO_Init(1, i, INPUT,PULL_UP);//make port B pins 0,1,2,3 input
 8000440:	79b9      	ldrb	r1, [r7, #6]
 8000442:	2302      	movs	r3, #2
 8000444:	2200      	movs	r2, #0
 8000446:	2001      	movs	r0, #1
 8000448:	f7ff fee4 	bl	8000214 <GPIO_Init>
	 for (i = 0 ; i<4 ; i++){
 800044c:	79bb      	ldrb	r3, [r7, #6]
 800044e:	3301      	adds	r3, #1
 8000450:	71bb      	strb	r3, [r7, #6]
 8000452:	79bb      	ldrb	r3, [r7, #6]
 8000454:	2b03      	cmp	r3, #3
 8000456:	d9f3      	bls.n	8000440 <KEYPAD_Init+0x30>
	 }
}
 8000458:	bf00      	nop
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <KEYPAD_GetKey>:

unsigned char KEYPAD_GetKey(void){
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0

    return key;
 8000464:	4b03      	ldr	r3, [pc, #12]	; (8000474 <KEYPAD_GetKey+0x14>)
 8000466:	781b      	ldrb	r3, [r3, #0]
}
 8000468:	4618      	mov	r0, r3
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	20000030 	.word	0x20000030

08000478 <KEYPAD_Manage>:



void KEYPAD_Manage(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0

	  unsigned char row;
	  unsigned char column;


	  for(column =8 ; column <11 ; column++)
 800047e:	2308      	movs	r3, #8
 8000480:	71bb      	strb	r3, [r7, #6]
 8000482:	e041      	b.n	8000508 <KEYPAD_Manage+0x90>
	  		{
		              GPIO_WritePin(1,column,0);//put 0 in port B column 0
 8000484:	79bb      	ldrb	r3, [r7, #6]
 8000486:	2200      	movs	r2, #0
 8000488:	4619      	mov	r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	f7ff ff4c 	bl	8000328 <GPIO_WritePin>
		  	  	      for(row =0 ; row<4 ; row++)
 8000490:	2300      	movs	r3, #0
 8000492:	71fb      	strb	r3, [r7, #7]
 8000494:	e02c      	b.n	80004f0 <KEYPAD_Manage+0x78>
	  				  {
	  					if(GPIO_ReadPin(1,row) == 0) // 1, row means that read from port B and the selected row
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	4619      	mov	r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	f7ff ff96 	bl	80003cc <GPIO_ReadPin>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d121      	bne.n	80004ea <KEYPAD_Manage+0x72>
	  					  {

	  						for (unsigned int i = 0; i < 30000; i++)
 80004a6:	2300      	movs	r3, #0
 80004a8:	603b      	str	r3, [r7, #0]
 80004aa:	e002      	b.n	80004b2 <KEYPAD_Manage+0x3a>
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	3301      	adds	r3, #1
 80004b0:	603b      	str	r3, [r7, #0]
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	f247 522f 	movw	r2, #29999	; 0x752f
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d9f7      	bls.n	80004ac <KEYPAD_Manage+0x34>
	  						{}
	  						if(GPIO_ReadPin(1,row) == 0)
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	4619      	mov	r1, r3
 80004c0:	2001      	movs	r0, #1
 80004c2:	f7ff ff83 	bl	80003cc <GPIO_ReadPin>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d10e      	bne.n	80004ea <KEYPAD_Manage+0x72>
	  						{
	  							key = key_pad_map_array[row][column-8];
 80004cc:	79fa      	ldrb	r2, [r7, #7]
 80004ce:	79bb      	ldrb	r3, [r7, #6]
 80004d0:	f1a3 0108 	sub.w	r1, r3, #8
 80004d4:	4810      	ldr	r0, [pc, #64]	; (8000518 <KEYPAD_Manage+0xa0>)
 80004d6:	4613      	mov	r3, r2
 80004d8:	005b      	lsls	r3, r3, #1
 80004da:	4413      	add	r3, r2
 80004dc:	4403      	add	r3, r0
 80004de:	440b      	add	r3, r1
 80004e0:	781a      	ldrb	r2, [r3, #0]
 80004e2:	4b0e      	ldr	r3, [pc, #56]	; (800051c <KEYPAD_Manage+0xa4>)
 80004e4:	701a      	strb	r2, [r3, #0]
	  							KEYPAD_Callouts_KeyPressNotification();
 80004e6:	f000 f855 	bl	8000594 <KEYPAD_Callouts_KeyPressNotification>
		  	  	      for(row =0 ; row<4 ; row++)
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	3301      	adds	r3, #1
 80004ee:	71fb      	strb	r3, [r7, #7]
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	2b03      	cmp	r3, #3
 80004f4:	d9cf      	bls.n	8000496 <KEYPAD_Manage+0x1e>
	  						}

	  						//segment_turnoff();  if you wanna turn off after releasing and return to blank
	  						}
	  			      }
       		  GPIO_WritePin(1,column,1);//write one on port b on the selected pin
 80004f6:	79bb      	ldrb	r3, [r7, #6]
 80004f8:	2201      	movs	r2, #1
 80004fa:	4619      	mov	r1, r3
 80004fc:	2001      	movs	r0, #1
 80004fe:	f7ff ff13 	bl	8000328 <GPIO_WritePin>
	  for(column =8 ; column <11 ; column++)
 8000502:	79bb      	ldrb	r3, [r7, #6]
 8000504:	3301      	adds	r3, #1
 8000506:	71bb      	strb	r3, [r7, #6]
 8000508:	79bb      	ldrb	r3, [r7, #6]
 800050a:	2b0a      	cmp	r3, #10
 800050c:	d9ba      	bls.n	8000484 <KEYPAD_Manage+0xc>


	  		}

}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	080006d4 	.word	0x080006d4
 800051c:	20000030 	.word	0x20000030

08000520 <SEVEN_SEGMENT_Init>:
#include "SEVEN_SEGMENT.h"
#include "GPIO.h"

void SEVEN_SEGMENT_Init(void){
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
	unsigned char i ;
	  GPIO_EnableClock(0);// zero means port A
 8000526:	2000      	movs	r0, #0
 8000528:	f7ff fe54 	bl	80001d4 <GPIO_EnableClock>
	  for (i = 0; i < 7; i++) {
 800052c:	2300      	movs	r3, #0
 800052e:	71fb      	strb	r3, [r7, #7]
 8000530:	e008      	b.n	8000544 <SEVEN_SEGMENT_Init+0x24>
	     GPIO_Init( 0, i, OUTPUT, PUSH_PULL);// zero in the functions means PORT A
 8000532:	79f9      	ldrb	r1, [r7, #7]
 8000534:	2300      	movs	r3, #0
 8000536:	2201      	movs	r2, #1
 8000538:	2000      	movs	r0, #0
 800053a:	f7ff fe6b 	bl	8000214 <GPIO_Init>
	  for (i = 0; i < 7; i++) {
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	3301      	adds	r3, #1
 8000542:	71fb      	strb	r3, [r7, #7]
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	2b06      	cmp	r3, #6
 8000548:	d9f3      	bls.n	8000532 <SEVEN_SEGMENT_Init+0x12>
	   }
}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}

08000552 <SEVEN_SEGMENT_Off>:
void SEVEN_SEGMENT_Off(void){
 8000552:	b580      	push	{r7, lr}
 8000554:	b082      	sub	sp, #8
 8000556:	af00      	add	r7, sp, #0
	 unsigned char i ;
		   for (i = 0; i < 7; i++) {
 8000558:	2300      	movs	r3, #0
 800055a:	71fb      	strb	r3, [r7, #7]
 800055c:	e008      	b.n	8000570 <SEVEN_SEGMENT_Off+0x1e>
		 	            GPIO_WritePin( 0, i, 0);
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	2200      	movs	r2, #0
 8000562:	4619      	mov	r1, r3
 8000564:	2000      	movs	r0, #0
 8000566:	f7ff fedf 	bl	8000328 <GPIO_WritePin>
		   for (i = 0; i < 7; i++) {
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	3301      	adds	r3, #1
 800056e:	71fb      	strb	r3, [r7, #7]
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	2b06      	cmp	r3, #6
 8000574:	d9f3      	bls.n	800055e <SEVEN_SEGMENT_Off+0xc>
		 	          }
}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}

0800057e <main>:


unsigned char sevenSegHex[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66,
                                   0x6D, 0x7D, 0x07, 0x7F, 0x6F};

int main(void) {
 800057e:	b580      	push	{r7, lr}
 8000580:	af00      	add	r7, sp, #0
  SEVEN_SEGMENT_Init();
 8000582:	f7ff ffcd 	bl	8000520 <SEVEN_SEGMENT_Init>
  KEYPAD_Init();
 8000586:	f7ff ff43 	bl	8000410 <KEYPAD_Init>
  SEVEN_SEGMENT_Off();
 800058a:	f7ff ffe2 	bl	8000552 <SEVEN_SEGMENT_Off>



  while (1) {

	 KEYPAD_Manage();
 800058e:	f7ff ff73 	bl	8000478 <KEYPAD_Manage>
 8000592:	e7fc      	b.n	800058e <main+0x10>

08000594 <KEYPAD_Callouts_KeyPressNotification>:

 }
  return 0;
}

void  KEYPAD_Callouts_KeyPressNotification(void){
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
	unsigned char key = KEYPAD_GetKey() ;
 800059a:	f7ff ff61 	bl	8000460 <KEYPAD_GetKey>
 800059e:	4603      	mov	r3, r0
 80005a0:	71bb      	strb	r3, [r7, #6]
	unsigned char i ;
	if(key == '#'){SEVEN_SEGMENT_Off();}
 80005a2:	79bb      	ldrb	r3, [r7, #6]
 80005a4:	2b23      	cmp	r3, #35	; 0x23
 80005a6:	d101      	bne.n	80005ac <KEYPAD_Callouts_KeyPressNotification+0x18>
 80005a8:	f7ff ffd3 	bl	8000552 <SEVEN_SEGMENT_Off>
	if(key < 10){
 80005ac:	79bb      	ldrb	r3, [r7, #6]
 80005ae:	2b09      	cmp	r3, #9
 80005b0:	d81c      	bhi.n	80005ec <KEYPAD_Callouts_KeyPressNotification+0x58>
	for (i = 0; i < 7; i++) {
 80005b2:	2300      	movs	r3, #0
 80005b4:	71fb      	strb	r3, [r7, #7]
 80005b6:	e015      	b.n	80005e4 <KEYPAD_Callouts_KeyPressNotification+0x50>
	 	            GPIO_WritePin( 0 , i, (sevenSegHex[key] & (1 << i)) >> i);
 80005b8:	79bb      	ldrb	r3, [r7, #6]
 80005ba:	4a0f      	ldr	r2, [pc, #60]	; (80005f8 <KEYPAD_Callouts_KeyPressNotification+0x64>)
 80005bc:	5cd3      	ldrb	r3, [r2, r3]
 80005be:	4619      	mov	r1, r3
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	2201      	movs	r2, #1
 80005c4:	fa02 f303 	lsl.w	r3, r2, r3
 80005c8:	ea01 0203 	and.w	r2, r1, r3
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	fa42 f303 	asr.w	r3, r2, r3
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	4619      	mov	r1, r3
 80005d8:	2000      	movs	r0, #0
 80005da:	f7ff fea5 	bl	8000328 <GPIO_WritePin>
	for (i = 0; i < 7; i++) {
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	3301      	adds	r3, #1
 80005e2:	71fb      	strb	r3, [r7, #7]
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	2b06      	cmp	r3, #6
 80005e8:	d9e6      	bls.n	80005b8 <KEYPAD_Callouts_KeyPressNotification+0x24>
	 	          }
	}
	else{
		SEVEN_SEGMENT_Off();
	}
}
 80005ea:	e001      	b.n	80005f0 <KEYPAD_Callouts_KeyPressNotification+0x5c>
		SEVEN_SEGMENT_Off();
 80005ec:	f7ff ffb1 	bl	8000552 <SEVEN_SEGMENT_Off>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000008 	.word	0x20000008

080005fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <SystemInit+0x20>)
 8000602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000606:	4a05      	ldr	r2, [pc, #20]	; (800061c <SystemInit+0x20>)
 8000608:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800060c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000620:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000658 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000624:	480d      	ldr	r0, [pc, #52]	; (800065c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000626:	490e      	ldr	r1, [pc, #56]	; (8000660 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000628:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800062c:	e002      	b.n	8000634 <LoopCopyDataInit>

0800062e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000632:	3304      	adds	r3, #4

08000634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000638:	d3f9      	bcc.n	800062e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800063a:	4a0b      	ldr	r2, [pc, #44]	; (8000668 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800063c:	4c0b      	ldr	r4, [pc, #44]	; (800066c <LoopFillZerobss+0x26>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000640:	e001      	b.n	8000646 <LoopFillZerobss>

08000642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000644:	3204      	adds	r2, #4

08000646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000648:	d3fb      	bcc.n	8000642 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800064a:	f7ff ffd7 	bl	80005fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800064e:	f000 f811 	bl	8000674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000652:	f7ff ff94 	bl	800057e <main>
  bx  lr    
 8000656:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000658:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800065c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000660:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000664:	080006e8 	.word	0x080006e8
  ldr r2, =_sbss
 8000668:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800066c:	20000034 	.word	0x20000034

08000670 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000670:	e7fe      	b.n	8000670 <ADC_IRQHandler>
	...

08000674 <__libc_init_array>:
 8000674:	b570      	push	{r4, r5, r6, lr}
 8000676:	4e0d      	ldr	r6, [pc, #52]	; (80006ac <__libc_init_array+0x38>)
 8000678:	4c0d      	ldr	r4, [pc, #52]	; (80006b0 <__libc_init_array+0x3c>)
 800067a:	1ba4      	subs	r4, r4, r6
 800067c:	10a4      	asrs	r4, r4, #2
 800067e:	2500      	movs	r5, #0
 8000680:	42a5      	cmp	r5, r4
 8000682:	d109      	bne.n	8000698 <__libc_init_array+0x24>
 8000684:	4e0b      	ldr	r6, [pc, #44]	; (80006b4 <__libc_init_array+0x40>)
 8000686:	4c0c      	ldr	r4, [pc, #48]	; (80006b8 <__libc_init_array+0x44>)
 8000688:	f000 f818 	bl	80006bc <_init>
 800068c:	1ba4      	subs	r4, r4, r6
 800068e:	10a4      	asrs	r4, r4, #2
 8000690:	2500      	movs	r5, #0
 8000692:	42a5      	cmp	r5, r4
 8000694:	d105      	bne.n	80006a2 <__libc_init_array+0x2e>
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800069c:	4798      	blx	r3
 800069e:	3501      	adds	r5, #1
 80006a0:	e7ee      	b.n	8000680 <__libc_init_array+0xc>
 80006a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006a6:	4798      	blx	r3
 80006a8:	3501      	adds	r5, #1
 80006aa:	e7f2      	b.n	8000692 <__libc_init_array+0x1e>
 80006ac:	080006e0 	.word	0x080006e0
 80006b0:	080006e0 	.word	0x080006e0
 80006b4:	080006e0 	.word	0x080006e0
 80006b8:	080006e4 	.word	0x080006e4

080006bc <_init>:
 80006bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006be:	bf00      	nop
 80006c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006c2:	bc08      	pop	{r3}
 80006c4:	469e      	mov	lr, r3
 80006c6:	4770      	bx	lr

080006c8 <_fini>:
 80006c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ca:	bf00      	nop
 80006cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ce:	bc08      	pop	{r3}
 80006d0:	469e      	mov	lr, r3
 80006d2:	4770      	bx	lr

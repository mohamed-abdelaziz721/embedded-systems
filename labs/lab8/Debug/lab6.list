
lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000380  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000514  08000514  00010514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000520  08000520  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000520  08000520  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000520  08000520  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000520  08000520  00010520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000524  08000524  00010524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000008  08000530  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000530  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000990  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000034e  00000000  00000000  000209c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  00020d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000088  00000000  00000000  00020dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dde3  00000000  00000000  00020e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ffa  00000000  00000000  0002ec43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fb4d  00000000  00000000  0002fc3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007f78a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001c8  00000000  00000000  0007f7e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004fc 	.word	0x080004fc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	080004fc 	.word	0x080004fc

080001d4 <GPIO_EnableClock>:
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d106      	bne.n	80001f2 <GPIO_EnableClock+0x1e>
 80001e4:	4b0a      	ldr	r3, [pc, #40]	; (8000210 <GPIO_EnableClock+0x3c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a09      	ldr	r2, [pc, #36]	; (8000210 <GPIO_EnableClock+0x3c>)
 80001ea:	f043 0301 	orr.w	r3, r3, #1
 80001ee:	6013      	str	r3, [r2, #0]
 80001f0:	e008      	b.n	8000204 <GPIO_EnableClock+0x30>
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	2b01      	cmp	r3, #1
 80001f6:	d105      	bne.n	8000204 <GPIO_EnableClock+0x30>
 80001f8:	4b05      	ldr	r3, [pc, #20]	; (8000210 <GPIO_EnableClock+0x3c>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <GPIO_EnableClock+0x3c>)
 80001fe:	f043 0302 	orr.w	r3, r3, #2
 8000202:	6013      	str	r3, [r2, #0]
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr
 8000210:	40023830 	.word	0x40023830

08000214 <GPIO_Init>:
 8000214:	b490      	push	{r4, r7}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
 800021a:	4604      	mov	r4, r0
 800021c:	4608      	mov	r0, r1
 800021e:	4611      	mov	r1, r2
 8000220:	461a      	mov	r2, r3
 8000222:	4623      	mov	r3, r4
 8000224:	71fb      	strb	r3, [r7, #7]
 8000226:	4603      	mov	r3, r0
 8000228:	71bb      	strb	r3, [r7, #6]
 800022a:	460b      	mov	r3, r1
 800022c:	717b      	strb	r3, [r7, #5]
 800022e:	4613      	mov	r3, r2
 8000230:	713b      	strb	r3, [r7, #4]
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	4a3b      	ldr	r2, [pc, #236]	; (8000324 <GPIO_Init+0x110>)
 8000236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	79ba      	ldrb	r2, [r7, #6]
 800023e:	0052      	lsls	r2, r2, #1
 8000240:	2103      	movs	r1, #3
 8000242:	fa01 f202 	lsl.w	r2, r1, r2
 8000246:	43d2      	mvns	r2, r2
 8000248:	4610      	mov	r0, r2
 800024a:	79fa      	ldrb	r2, [r7, #7]
 800024c:	4935      	ldr	r1, [pc, #212]	; (8000324 <GPIO_Init+0x110>)
 800024e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000252:	4003      	ands	r3, r0
 8000254:	6013      	str	r3, [r2, #0]
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	4a32      	ldr	r2, [pc, #200]	; (8000324 <GPIO_Init+0x110>)
 800025a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	7979      	ldrb	r1, [r7, #5]
 8000262:	79ba      	ldrb	r2, [r7, #6]
 8000264:	0052      	lsls	r2, r2, #1
 8000266:	fa01 f202 	lsl.w	r2, r1, r2
 800026a:	4610      	mov	r0, r2
 800026c:	79fa      	ldrb	r2, [r7, #7]
 800026e:	492d      	ldr	r1, [pc, #180]	; (8000324 <GPIO_Init+0x110>)
 8000270:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000274:	4303      	orrs	r3, r0
 8000276:	6013      	str	r3, [r2, #0]
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	4a2a      	ldr	r2, [pc, #168]	; (8000324 <GPIO_Init+0x110>)
 800027c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000280:	3304      	adds	r3, #4
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	79ba      	ldrb	r2, [r7, #6]
 8000286:	2101      	movs	r1, #1
 8000288:	fa01 f202 	lsl.w	r2, r1, r2
 800028c:	43d2      	mvns	r2, r2
 800028e:	4610      	mov	r0, r2
 8000290:	79fa      	ldrb	r2, [r7, #7]
 8000292:	4924      	ldr	r1, [pc, #144]	; (8000324 <GPIO_Init+0x110>)
 8000294:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000298:	3204      	adds	r2, #4
 800029a:	4003      	ands	r3, r0
 800029c:	6013      	str	r3, [r2, #0]
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	4a20      	ldr	r2, [pc, #128]	; (8000324 <GPIO_Init+0x110>)
 80002a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a6:	3304      	adds	r3, #4
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	793a      	ldrb	r2, [r7, #4]
 80002ac:	f002 0101 	and.w	r1, r2, #1
 80002b0:	79ba      	ldrb	r2, [r7, #6]
 80002b2:	fa01 f202 	lsl.w	r2, r1, r2
 80002b6:	4610      	mov	r0, r2
 80002b8:	79fa      	ldrb	r2, [r7, #7]
 80002ba:	491a      	ldr	r1, [pc, #104]	; (8000324 <GPIO_Init+0x110>)
 80002bc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80002c0:	3204      	adds	r2, #4
 80002c2:	4303      	orrs	r3, r0
 80002c4:	6013      	str	r3, [r2, #0]
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	4a16      	ldr	r2, [pc, #88]	; (8000324 <GPIO_Init+0x110>)
 80002ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ce:	330c      	adds	r3, #12
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	79ba      	ldrb	r2, [r7, #6]
 80002d4:	0052      	lsls	r2, r2, #1
 80002d6:	2103      	movs	r1, #3
 80002d8:	fa01 f202 	lsl.w	r2, r1, r2
 80002dc:	43d2      	mvns	r2, r2
 80002de:	4610      	mov	r0, r2
 80002e0:	79fa      	ldrb	r2, [r7, #7]
 80002e2:	4910      	ldr	r1, [pc, #64]	; (8000324 <GPIO_Init+0x110>)
 80002e4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80002e8:	320c      	adds	r2, #12
 80002ea:	4003      	ands	r3, r0
 80002ec:	6013      	str	r3, [r2, #0]
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	4a0c      	ldr	r2, [pc, #48]	; (8000324 <GPIO_Init+0x110>)
 80002f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f6:	330c      	adds	r3, #12
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	793a      	ldrb	r2, [r7, #4]
 80002fc:	1052      	asrs	r2, r2, #1
 80002fe:	f002 0103 	and.w	r1, r2, #3
 8000302:	79ba      	ldrb	r2, [r7, #6]
 8000304:	0052      	lsls	r2, r2, #1
 8000306:	fa01 f202 	lsl.w	r2, r1, r2
 800030a:	4610      	mov	r0, r2
 800030c:	79fa      	ldrb	r2, [r7, #7]
 800030e:	4905      	ldr	r1, [pc, #20]	; (8000324 <GPIO_Init+0x110>)
 8000310:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000314:	320c      	adds	r2, #12
 8000316:	4303      	orrs	r3, r0
 8000318:	6013      	str	r3, [r2, #0]
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bc90      	pop	{r4, r7}
 8000322:	4770      	bx	lr
 8000324:	20000000 	.word	0x20000000

08000328 <main>:

void define(void);
void urt(void);
void run(void);

int main(void) {
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	define();
 800032c:	f000 f805 	bl	800033a <define>
	urt();
 8000330:	f000 f810 	bl	8000354 <urt>
    run();
 8000334:	f000 f854 	bl	80003e0 <run>
	while(1);
 8000338:	e7fe      	b.n	8000338 <main+0x10>

0800033a <define>:
  return 0;
}

void define(void)
{
 800033a:	b580      	push	{r7, lr}
 800033c:	af00      	add	r7, sp, #0
	GPIO_EnableClock(0);
 800033e:	2000      	movs	r0, #0
 8000340:	f7ff ff48 	bl	80001d4 <GPIO_EnableClock>
	GPIO_Init(0,2,ALTERNATE_FUN,PUSH_PULL);
 8000344:	2300      	movs	r3, #0
 8000346:	2202      	movs	r2, #2
 8000348:	2102      	movs	r1, #2
 800034a:	2000      	movs	r0, #0
 800034c:	f7ff ff62 	bl	8000214 <GPIO_Init>
}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}

08000354 <urt>:

void urt(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
	    GPIOA_AFRL |=(0x7<<2 * 4);
 8000358:	4b1c      	ldr	r3, [pc, #112]	; (80003cc <urt+0x78>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a1b      	ldr	r2, [pc, #108]	; (80003cc <urt+0x78>)
 800035e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000362:	6013      	str	r3, [r2, #0]

		RCC_APB1ENR|=(1<<17);
 8000364:	4b1a      	ldr	r3, [pc, #104]	; (80003d0 <urt+0x7c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a19      	ldr	r2, [pc, #100]	; (80003d0 <urt+0x7c>)
 800036a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800036e:	6013      	str	r3, [r2, #0]

		USART_BRR=0x683;
 8000370:	4b18      	ldr	r3, [pc, #96]	; (80003d4 <urt+0x80>)
 8000372:	f240 6283 	movw	r2, #1667	; 0x683
 8000376:	601a      	str	r2, [r3, #0]

		USART_CR1 &=~(1<<15);
 8000378:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <urt+0x84>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a16      	ldr	r2, [pc, #88]	; (80003d8 <urt+0x84>)
 800037e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000382:	6013      	str	r3, [r2, #0]

		USART_CR1 |=(1<<13);
 8000384:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <urt+0x84>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a13      	ldr	r2, [pc, #76]	; (80003d8 <urt+0x84>)
 800038a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800038e:	6013      	str	r3, [r2, #0]

		USART_CR1 &=~(1<<12);
 8000390:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <urt+0x84>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a10      	ldr	r2, [pc, #64]	; (80003d8 <urt+0x84>)
 8000396:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800039a:	6013      	str	r3, [r2, #0]

		USART_CR1 |=(1<<3);
 800039c:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <urt+0x84>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a0d      	ldr	r2, [pc, #52]	; (80003d8 <urt+0x84>)
 80003a2:	f043 0308 	orr.w	r3, r3, #8
 80003a6:	6013      	str	r3, [r2, #0]

		USART_CR1 &=~(1<<2);
 80003a8:	4b0b      	ldr	r3, [pc, #44]	; (80003d8 <urt+0x84>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a0a      	ldr	r2, [pc, #40]	; (80003d8 <urt+0x84>)
 80003ae:	f023 0304 	bic.w	r3, r3, #4
 80003b2:	6013      	str	r3, [r2, #0]

		USART_CR2 &=~(0x3<<12);
 80003b4:	4b09      	ldr	r3, [pc, #36]	; (80003dc <urt+0x88>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a08      	ldr	r2, [pc, #32]	; (80003dc <urt+0x88>)
 80003ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80003be:	6013      	str	r3, [r2, #0]
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	40020020 	.word	0x40020020
 80003d0:	40023840 	.word	0x40023840
 80003d4:	40004408 	.word	0x40004408
 80003d8:	4000440c 	.word	0x4000440c
 80003dc:	40004410 	.word	0x40004410

080003e0 <run>:
void run(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
	char x[]="HELLO WORLD";
 80003e6:	4a12      	ldr	r2, [pc, #72]	; (8000430 <run+0x50>)
 80003e8:	463b      	mov	r3, r7
 80003ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80003ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		for (int i =0;x[i]!='\0';i++)
 80003f0:	2300      	movs	r3, #0
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	e00f      	b.n	8000416 <run+0x36>
		{
			USART_DR = x[i];
 80003f6:	463a      	mov	r2, r7
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	4413      	add	r3, r2
 80003fc:	781a      	ldrb	r2, [r3, #0]
 80003fe:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <run+0x54>)
 8000400:	601a      	str	r2, [r3, #0]
			while(((USART_SR>>6)& 0x01)==0);
 8000402:	bf00      	nop
 8000404:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <run+0x58>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800040c:	2b00      	cmp	r3, #0
 800040e:	d0f9      	beq.n	8000404 <run+0x24>
		for (int i =0;x[i]!='\0';i++)
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	3301      	adds	r3, #1
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	463a      	mov	r2, r7
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	4413      	add	r3, r2
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d1e9      	bne.n	80003f6 <run+0x16>

		}
}
 8000422:	bf00      	nop
 8000424:	bf00      	nop
 8000426:	3714      	adds	r7, #20
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	08000514 	.word	0x08000514
 8000434:	40004404 	.word	0x40004404
 8000438:	40004400 	.word	0x40004400

0800043c <SystemInit>:
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
 8000440:	4b06      	ldr	r3, [pc, #24]	; (800045c <SystemInit+0x20>)
 8000442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000446:	4a05      	ldr	r2, [pc, #20]	; (800045c <SystemInit+0x20>)
 8000448:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800044c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	e000ed00 	.word	0xe000ed00

08000460 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000460:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000498 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000464:	480d      	ldr	r0, [pc, #52]	; (800049c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000466:	490e      	ldr	r1, [pc, #56]	; (80004a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000468:	4a0e      	ldr	r2, [pc, #56]	; (80004a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800046a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800046c:	e002      	b.n	8000474 <LoopCopyDataInit>

0800046e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800046e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000472:	3304      	adds	r3, #4

08000474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000478:	d3f9      	bcc.n	800046e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800047a:	4a0b      	ldr	r2, [pc, #44]	; (80004a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800047c:	4c0b      	ldr	r4, [pc, #44]	; (80004ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800047e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000480:	e001      	b.n	8000486 <LoopFillZerobss>

08000482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000484:	3204      	adds	r2, #4

08000486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000488:	d3fb      	bcc.n	8000482 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800048a:	f7ff ffd7 	bl	800043c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800048e:	f000 f811 	bl	80004b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000492:	f7ff ff49 	bl	8000328 <main>
  bx  lr    
 8000496:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000498:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800049c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a0:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80004a4:	08000528 	.word	0x08000528
  ldr r2, =_sbss
 80004a8:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80004ac:	20000024 	.word	0x20000024

080004b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004b0:	e7fe      	b.n	80004b0 <ADC_IRQHandler>
	...

080004b4 <__libc_init_array>:
 80004b4:	b570      	push	{r4, r5, r6, lr}
 80004b6:	4d0d      	ldr	r5, [pc, #52]	; (80004ec <__libc_init_array+0x38>)
 80004b8:	4c0d      	ldr	r4, [pc, #52]	; (80004f0 <__libc_init_array+0x3c>)
 80004ba:	1b64      	subs	r4, r4, r5
 80004bc:	10a4      	asrs	r4, r4, #2
 80004be:	2600      	movs	r6, #0
 80004c0:	42a6      	cmp	r6, r4
 80004c2:	d109      	bne.n	80004d8 <__libc_init_array+0x24>
 80004c4:	4d0b      	ldr	r5, [pc, #44]	; (80004f4 <__libc_init_array+0x40>)
 80004c6:	4c0c      	ldr	r4, [pc, #48]	; (80004f8 <__libc_init_array+0x44>)
 80004c8:	f000 f818 	bl	80004fc <_init>
 80004cc:	1b64      	subs	r4, r4, r5
 80004ce:	10a4      	asrs	r4, r4, #2
 80004d0:	2600      	movs	r6, #0
 80004d2:	42a6      	cmp	r6, r4
 80004d4:	d105      	bne.n	80004e2 <__libc_init_array+0x2e>
 80004d6:	bd70      	pop	{r4, r5, r6, pc}
 80004d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80004dc:	4798      	blx	r3
 80004de:	3601      	adds	r6, #1
 80004e0:	e7ee      	b.n	80004c0 <__libc_init_array+0xc>
 80004e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004e6:	4798      	blx	r3
 80004e8:	3601      	adds	r6, #1
 80004ea:	e7f2      	b.n	80004d2 <__libc_init_array+0x1e>
 80004ec:	08000520 	.word	0x08000520
 80004f0:	08000520 	.word	0x08000520
 80004f4:	08000520 	.word	0x08000520
 80004f8:	08000524 	.word	0x08000524

080004fc <_init>:
 80004fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fe:	bf00      	nop
 8000500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000502:	bc08      	pop	{r3}
 8000504:	469e      	mov	lr, r3
 8000506:	4770      	bx	lr

08000508 <_fini>:
 8000508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050a:	bf00      	nop
 800050c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800050e:	bc08      	pop	{r3}
 8000510:	469e      	mov	lr, r3
 8000512:	4770      	bx	lr

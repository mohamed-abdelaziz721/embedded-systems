
dma-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a48  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000bdc  08000bdc  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000bdc  08000bdc  000201a8  2**0
                  CONTENTS
  4 .ARM          00000000  08000bdc  08000bdc  000201a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000bdc  08000bdc  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bdc  08000bdc  00010bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000be0  08000be0  00010be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  08000be4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  200001a8  08000d8c  000201a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08000d8c  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000e5b  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000459  00000000  00000000  00021033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000108  00000000  00000000  00021490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000c0  00000000  00000000  00021598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000d44  00000000  00000000  00021658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000008a6  00000000  00000000  0002239c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003cd0  00000000  00000000  00022c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00026912  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002dc  00000000  00000000  00026968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200001a8 	.word	0x200001a8
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000bc4 	.word	0x08000bc4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200001ac 	.word	0x200001ac
 80001d0:	08000bc4 	.word	0x08000bc4

080001d4 <DMA_voidInit>:
#define RCC_AHB1ENR		*((volatile u32*)(0x40023800 + 0x30))

/************************************************************/
/*						FUNCTION DEFINITIONS				*/
/************************************************************/
void DMA_voidInit(DMA_dtype* DMA_ptr){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC_AHB1ENR, 21);
 80001dc:	4b08      	ldr	r3, [pc, #32]	; (8000200 <DMA_voidInit+0x2c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a07      	ldr	r2, [pc, #28]	; (8000200 <DMA_voidInit+0x2c>)
 80001e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001e6:	6013      	str	r3, [r2, #0]
	SET_BIT(RCC_AHB1ENR, 22);
 80001e8:	4b05      	ldr	r3, [pc, #20]	; (8000200 <DMA_voidInit+0x2c>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a04      	ldr	r2, [pc, #16]	; (8000200 <DMA_voidInit+0x2c>)
 80001ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001f2:	6013      	str	r3, [r2, #0]
}
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr
 8000200:	40023830 	.word	0x40023830

08000204 <DMA_voidConfigureStream>:


ErrorStatus DMA_voidConfigureStream(DMA_dtype* DMA_ptr, u8 stream_idx, streamCofig_dtype* streamConfig_ptr){
 8000204:	b480      	push	{r7}
 8000206:	b087      	sub	sp, #28
 8000208:	af00      	add	r7, sp, #0
 800020a:	60f8      	str	r0, [r7, #12]
 800020c:	460b      	mov	r3, r1
 800020e:	607a      	str	r2, [r7, #4]
 8000210:	72fb      	strb	r3, [r7, #11]

	if((streamConfig_ptr->transfer_direction == MEMORY_TO_MEMORY) && ((u32)DMA_ptr == (u32)DMA1_BASE_ADDRESS)){
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	7a9b      	ldrb	r3, [r3, #10]
 8000216:	2b02      	cmp	r3, #2
 8000218:	d105      	bne.n	8000226 <DMA_voidConfigureStream+0x22>
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	4a38      	ldr	r2, [pc, #224]	; (8000300 <DMA_voidConfigureStream+0xfc>)
 800021e:	4293      	cmp	r3, r2
 8000220:	d101      	bne.n	8000226 <DMA_voidConfigureStream+0x22>
		return ERROR;
 8000222:	2301      	movs	r3, #1
 8000224:	e27a      	b.n	800071c <DMA_voidConfigureStream+0x518>
	}

	if((streamConfig_ptr->memory_size == TWO_BYTES) && (streamConfig_ptr->peripheral_size == ONE_BYTE)){
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	7bdb      	ldrb	r3, [r3, #15]
 800022a:	2b01      	cmp	r3, #1
 800022c:	d10c      	bne.n	8000248 <DMA_voidConfigureStream+0x44>
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	7c1b      	ldrb	r3, [r3, #16]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d108      	bne.n	8000248 <DMA_voidConfigureStream+0x44>
		if(streamConfig_ptr->number_of_transactions % 2){
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	891b      	ldrh	r3, [r3, #8]
 800023a:	f003 0301 	and.w	r3, r3, #1
 800023e:	b29b      	uxth	r3, r3
 8000240:	2b00      	cmp	r3, #0
 8000242:	d023      	beq.n	800028c <DMA_voidConfigureStream+0x88>
			return ERROR;
 8000244:	2301      	movs	r3, #1
 8000246:	e269      	b.n	800071c <DMA_voidConfigureStream+0x518>
		}
	}
	else if((streamConfig_ptr->memory_size == FOUR_BYTES) && (streamConfig_ptr->peripheral_size == ONE_BYTE)){
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	7bdb      	ldrb	r3, [r3, #15]
 800024c:	2b02      	cmp	r3, #2
 800024e:	d10c      	bne.n	800026a <DMA_voidConfigureStream+0x66>
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	7c1b      	ldrb	r3, [r3, #16]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d108      	bne.n	800026a <DMA_voidConfigureStream+0x66>
		if(streamConfig_ptr->number_of_transactions % 4){
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	891b      	ldrh	r3, [r3, #8]
 800025c:	f003 0303 	and.w	r3, r3, #3
 8000260:	b29b      	uxth	r3, r3
 8000262:	2b00      	cmp	r3, #0
 8000264:	d012      	beq.n	800028c <DMA_voidConfigureStream+0x88>
			return ERROR;
 8000266:	2301      	movs	r3, #1
 8000268:	e258      	b.n	800071c <DMA_voidConfigureStream+0x518>
		}
	}
	else if((streamConfig_ptr->memory_size == FOUR_BYTES) && (streamConfig_ptr->peripheral_size == TWO_BYTES)){
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	7bdb      	ldrb	r3, [r3, #15]
 800026e:	2b02      	cmp	r3, #2
 8000270:	d10c      	bne.n	800028c <DMA_voidConfigureStream+0x88>
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	7c1b      	ldrb	r3, [r3, #16]
 8000276:	2b01      	cmp	r3, #1
 8000278:	d108      	bne.n	800028c <DMA_voidConfigureStream+0x88>
		if(streamConfig_ptr->number_of_transactions % 2){
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	891b      	ldrh	r3, [r3, #8]
 800027e:	f003 0301 	and.w	r3, r3, #1
 8000282:	b29b      	uxth	r3, r3
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <DMA_voidConfigureStream+0x88>
			return ERROR;
 8000288:	2301      	movs	r3, #1
 800028a:	e247      	b.n	800071c <DMA_voidConfigureStream+0x518>
		}
	}

	/* check BURST configs */
	if(((streamConfig_ptr->burst.memory_beats != 0) || (streamConfig_ptr->burst.peripheral_beats != 0))){
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	7b5b      	ldrb	r3, [r3, #13]
 8000290:	2b00      	cmp	r3, #0
		if(((streamConfig_ptr->fifo_threshold + 1) * 4) % 4){
			return ERROR;
		}
	}

	if(((streamConfig_ptr->burst.memory_beats != 0) || (streamConfig_ptr->burst.peripheral_beats != 0))
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	7b5b      	ldrb	r3, [r3, #13]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d103      	bne.n	80002a2 <DMA_voidConfigureStream+0x9e>
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	7b9b      	ldrb	r3, [r3, #14]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d018      	beq.n	80002d4 <DMA_voidConfigureStream+0xd0>
			&& streamConfig_ptr->circular_mode == TRUE){ /* if BURST enabled with circular mode */
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	7c5b      	ldrb	r3, [r3, #17]
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d114      	bne.n	80002d4 <DMA_voidConfigureStream+0xd0>
		/*check if DMA_SxNDTR = Multiple of ((Mburst beat) Ã— (Msize)/(Psize)) is satisfied or not */
		u16 estimated_number_of_transcations = streamConfig_ptr->burst.memory_beats * (streamConfig_ptr->memory_size / streamConfig_ptr->peripheral_size);
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	7b5b      	ldrb	r3, [r3, #13]
 80002ae:	b29a      	uxth	r2, r3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	7bd9      	ldrb	r1, [r3, #15]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	7c1b      	ldrb	r3, [r3, #16]
 80002b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	b29b      	uxth	r3, r3
 80002c0:	fb12 f303 	smulbb	r3, r2, r3
 80002c4:	82fb      	strh	r3, [r7, #22]
		if(estimated_number_of_transcations != streamConfig_ptr->number_of_transactions){
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	891b      	ldrh	r3, [r3, #8]
 80002ca:	8afa      	ldrh	r2, [r7, #22]
 80002cc:	429a      	cmp	r2, r3
 80002ce:	d001      	beq.n	80002d4 <DMA_voidConfigureStream+0xd0>
			return ERROR;
 80002d0:	2301      	movs	r3, #1
 80002d2:	e223      	b.n	800071c <DMA_voidConfigureStream+0x518>
		}
	}

	if((streamConfig_ptr->circular_mode == TRUE) && (streamConfig_ptr->flow_controller == PERIPHERAL_FLOW_CONTROLLER)){
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	7c5b      	ldrb	r3, [r3, #17]
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d105      	bne.n	80002e8 <DMA_voidConfigureStream+0xe4>
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	7e9b      	ldrb	r3, [r3, #26]
 80002e0:	2b01      	cmp	r3, #1
 80002e2:	d101      	bne.n	80002e8 <DMA_voidConfigureStream+0xe4>
		return ERROR;
 80002e4:	2301      	movs	r3, #1
 80002e6:	e219      	b.n	800071c <DMA_voidConfigureStream+0x518>
	}

	if((streamConfig_ptr->peripheral_size != streamConfig_ptr->memory_size) && (streamConfig_ptr->direct_mode == DIRECT_MODE_ENABLED)){
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	7c1a      	ldrb	r2, [r3, #16]
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	7bdb      	ldrb	r3, [r3, #15]
 80002f0:	429a      	cmp	r2, r3
 80002f2:	d007      	beq.n	8000304 <DMA_voidConfigureStream+0x100>
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	7edb      	ldrb	r3, [r3, #27]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d103      	bne.n	8000304 <DMA_voidConfigureStream+0x100>
		return ERROR;
 80002fc:	2301      	movs	r3, #1
 80002fe:	e20d      	b.n	800071c <DMA_voidConfigureStream+0x518>
 8000300:	40026000 	.word	0x40026000
	}

	/* disable the stream and wait for it to be disabled */
	DMA_ptr->S[stream_idx].CR = 0x00;
 8000304:	7afa      	ldrb	r2, [r7, #11]
 8000306:	68f9      	ldr	r1, [r7, #12]
 8000308:	4613      	mov	r3, r2
 800030a:	005b      	lsls	r3, r3, #1
 800030c:	4413      	add	r3, r2
 800030e:	00db      	lsls	r3, r3, #3
 8000310:	440b      	add	r3, r1
 8000312:	3310      	adds	r3, #16
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
	while(GET_BIT(DMA_ptr->S[stream_idx].CR, 0));
 8000318:	bf00      	nop
 800031a:	7afa      	ldrb	r2, [r7, #11]
 800031c:	68f9      	ldr	r1, [r7, #12]
 800031e:	4613      	mov	r3, r2
 8000320:	005b      	lsls	r3, r3, #1
 8000322:	4413      	add	r3, r2
 8000324:	00db      	lsls	r3, r3, #3
 8000326:	440b      	add	r3, r1
 8000328:	3310      	adds	r3, #16
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	f003 0301 	and.w	r3, r3, #1
 8000330:	2b00      	cmp	r3, #0
 8000332:	d1f2      	bne.n	800031a <DMA_voidConfigureStream+0x116>

	/* set the number of transcations in NDTR */
	DMA_ptr->S[stream_idx].NDTR = streamConfig_ptr->number_of_transactions;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	891b      	ldrh	r3, [r3, #8]
 8000338:	7afa      	ldrb	r2, [r7, #11]
 800033a:	4618      	mov	r0, r3
 800033c:	68f9      	ldr	r1, [r7, #12]
 800033e:	4613      	mov	r3, r2
 8000340:	005b      	lsls	r3, r3, #1
 8000342:	4413      	add	r3, r2
 8000344:	00db      	lsls	r3, r3, #3
 8000346:	440b      	add	r3, r1
 8000348:	3314      	adds	r3, #20
 800034a:	6018      	str	r0, [r3, #0]

	/* apply incremention configurations */
	DMA_ptr->S[stream_idx].CR |= (streamConfig_ptr->peripheral_ptr_mode << 9)
 800034c:	7afa      	ldrb	r2, [r7, #11]
 800034e:	68f9      	ldr	r1, [r7, #12]
 8000350:	4613      	mov	r3, r2
 8000352:	005b      	lsls	r3, r3, #1
 8000354:	4413      	add	r3, r2
 8000356:	00db      	lsls	r3, r3, #3
 8000358:	440b      	add	r3, r1
 800035a:	3310      	adds	r3, #16
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	7cd2      	ldrb	r2, [r2, #19]
 8000362:	0251      	lsls	r1, r2, #9
								|(streamConfig_ptr->memory_ptr_mode << 10);
 8000364:	687a      	ldr	r2, [r7, #4]
 8000366:	7c92      	ldrb	r2, [r2, #18]
 8000368:	0292      	lsls	r2, r2, #10
 800036a:	430a      	orrs	r2, r1
 800036c:	4611      	mov	r1, r2
	DMA_ptr->S[stream_idx].CR |= (streamConfig_ptr->peripheral_ptr_mode << 9)
 800036e:	7afa      	ldrb	r2, [r7, #11]
 8000370:	4319      	orrs	r1, r3
 8000372:	68f8      	ldr	r0, [r7, #12]
 8000374:	4613      	mov	r3, r2
 8000376:	005b      	lsls	r3, r3, #1
 8000378:	4413      	add	r3, r2
 800037a:	00db      	lsls	r3, r3, #3
 800037c:	4403      	add	r3, r0
 800037e:	3310      	adds	r3, #16
 8000380:	6019      	str	r1, [r3, #0]

	/* apply memory and peripheral data size */
	DMA_ptr->S[stream_idx].CR |= (streamConfig_ptr->memory_size << 13)
 8000382:	7afa      	ldrb	r2, [r7, #11]
 8000384:	68f9      	ldr	r1, [r7, #12]
 8000386:	4613      	mov	r3, r2
 8000388:	005b      	lsls	r3, r3, #1
 800038a:	4413      	add	r3, r2
 800038c:	00db      	lsls	r3, r3, #3
 800038e:	440b      	add	r3, r1
 8000390:	3310      	adds	r3, #16
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	687a      	ldr	r2, [r7, #4]
 8000396:	7bd2      	ldrb	r2, [r2, #15]
 8000398:	0351      	lsls	r1, r2, #13
								|(streamConfig_ptr->peripheral_size << 11);
 800039a:	687a      	ldr	r2, [r7, #4]
 800039c:	7c12      	ldrb	r2, [r2, #16]
 800039e:	02d2      	lsls	r2, r2, #11
 80003a0:	430a      	orrs	r2, r1
 80003a2:	4611      	mov	r1, r2
	DMA_ptr->S[stream_idx].CR |= (streamConfig_ptr->memory_size << 13)
 80003a4:	7afa      	ldrb	r2, [r7, #11]
 80003a6:	4319      	orrs	r1, r3
 80003a8:	68f8      	ldr	r0, [r7, #12]
 80003aa:	4613      	mov	r3, r2
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	4413      	add	r3, r2
 80003b0:	00db      	lsls	r3, r3, #3
 80003b2:	4403      	add	r3, r0
 80003b4:	3310      	adds	r3, #16
 80003b6:	6019      	str	r1, [r3, #0]

	/* apply interrupts configurations */
	SET_VALUE(DMA_ptr->S[stream_idx].FCR, 7, streamConfig_ptr->fifo_error_interrupt_enable);
 80003b8:	7afa      	ldrb	r2, [r7, #11]
 80003ba:	68f9      	ldr	r1, [r7, #12]
 80003bc:	4613      	mov	r3, r2
 80003be:	005b      	lsls	r3, r3, #1
 80003c0:	4413      	add	r3, r2
 80003c2:	00db      	lsls	r3, r3, #3
 80003c4:	440b      	add	r3, r1
 80003c6:	3324      	adds	r3, #36	; 0x24
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	7afa      	ldrb	r2, [r7, #11]
 80003cc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80003d0:	68f8      	ldr	r0, [r7, #12]
 80003d2:	4613      	mov	r3, r2
 80003d4:	005b      	lsls	r3, r3, #1
 80003d6:	4413      	add	r3, r2
 80003d8:	00db      	lsls	r3, r3, #3
 80003da:	4403      	add	r3, r0
 80003dc:	3324      	adds	r3, #36	; 0x24
 80003de:	6019      	str	r1, [r3, #0]
 80003e0:	7afa      	ldrb	r2, [r7, #11]
 80003e2:	68f9      	ldr	r1, [r7, #12]
 80003e4:	4613      	mov	r3, r2
 80003e6:	005b      	lsls	r3, r3, #1
 80003e8:	4413      	add	r3, r2
 80003ea:	00db      	lsls	r3, r3, #3
 80003ec:	440b      	add	r3, r1
 80003ee:	3324      	adds	r3, #36	; 0x24
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	687a      	ldr	r2, [r7, #4]
 80003f4:	7e12      	ldrb	r2, [r2, #24]
 80003f6:	01d2      	lsls	r2, r2, #7
 80003f8:	4611      	mov	r1, r2
 80003fa:	7afa      	ldrb	r2, [r7, #11]
 80003fc:	4319      	orrs	r1, r3
 80003fe:	68f8      	ldr	r0, [r7, #12]
 8000400:	4613      	mov	r3, r2
 8000402:	005b      	lsls	r3, r3, #1
 8000404:	4413      	add	r3, r2
 8000406:	00db      	lsls	r3, r3, #3
 8000408:	4403      	add	r3, r0
 800040a:	3324      	adds	r3, #36	; 0x24
 800040c:	6019      	str	r1, [r3, #0]
	DMA_ptr->S[stream_idx].CR |= (streamConfig_ptr->direct_mode_error_interrupt_enable << 1)
 800040e:	7afa      	ldrb	r2, [r7, #11]
 8000410:	68f9      	ldr	r1, [r7, #12]
 8000412:	4613      	mov	r3, r2
 8000414:	005b      	lsls	r3, r3, #1
 8000416:	4413      	add	r3, r2
 8000418:	00db      	lsls	r3, r3, #3
 800041a:	440b      	add	r3, r1
 800041c:	3310      	adds	r3, #16
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	7dd2      	ldrb	r2, [r2, #23]
 8000424:	0051      	lsls	r1, r2, #1
								|(streamConfig_ptr->half_transfer_interrupt_enable << 3)
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	7d52      	ldrb	r2, [r2, #21]
 800042a:	00d2      	lsls	r2, r2, #3
 800042c:	4311      	orrs	r1, r2
								|(streamConfig_ptr->transfer_error_interrupt_enable << 2)
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	7d92      	ldrb	r2, [r2, #22]
 8000432:	0092      	lsls	r2, r2, #2
 8000434:	4311      	orrs	r1, r2
								|(streamConfig_ptr->transfer_interrupt_enable << 4);
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	7d12      	ldrb	r2, [r2, #20]
 800043a:	0112      	lsls	r2, r2, #4
 800043c:	430a      	orrs	r2, r1
 800043e:	4611      	mov	r1, r2
	DMA_ptr->S[stream_idx].CR |= (streamConfig_ptr->direct_mode_error_interrupt_enable << 1)
 8000440:	7afa      	ldrb	r2, [r7, #11]
 8000442:	4319      	orrs	r1, r3
 8000444:	68f8      	ldr	r0, [r7, #12]
 8000446:	4613      	mov	r3, r2
 8000448:	005b      	lsls	r3, r3, #1
 800044a:	4413      	add	r3, r2
 800044c:	00db      	lsls	r3, r3, #3
 800044e:	4403      	add	r3, r0
 8000450:	3310      	adds	r3, #16
 8000452:	6019      	str	r1, [r3, #0]

	/* select channel and select priority of the stream */
	DMA_ptr->S[stream_idx].CR |= streamConfig_ptr->channel_number << 25;
 8000454:	7afa      	ldrb	r2, [r7, #11]
 8000456:	68f9      	ldr	r1, [r7, #12]
 8000458:	4613      	mov	r3, r2
 800045a:	005b      	lsls	r3, r3, #1
 800045c:	4413      	add	r3, r2
 800045e:	00db      	lsls	r3, r3, #3
 8000460:	440b      	add	r3, r1
 8000462:	3310      	adds	r3, #16
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	687a      	ldr	r2, [r7, #4]
 8000468:	7ad2      	ldrb	r2, [r2, #11]
 800046a:	0652      	lsls	r2, r2, #25
 800046c:	4611      	mov	r1, r2
 800046e:	7afa      	ldrb	r2, [r7, #11]
 8000470:	4319      	orrs	r1, r3
 8000472:	68f8      	ldr	r0, [r7, #12]
 8000474:	4613      	mov	r3, r2
 8000476:	005b      	lsls	r3, r3, #1
 8000478:	4413      	add	r3, r2
 800047a:	00db      	lsls	r3, r3, #3
 800047c:	4403      	add	r3, r0
 800047e:	3310      	adds	r3, #16
 8000480:	6019      	str	r1, [r3, #0]
	DMA_ptr->S[stream_idx].CR |= streamConfig_ptr->stream_priority << 16;
 8000482:	7afa      	ldrb	r2, [r7, #11]
 8000484:	68f9      	ldr	r1, [r7, #12]
 8000486:	4613      	mov	r3, r2
 8000488:	005b      	lsls	r3, r3, #1
 800048a:	4413      	add	r3, r2
 800048c:	00db      	lsls	r3, r3, #3
 800048e:	440b      	add	r3, r1
 8000490:	3310      	adds	r3, #16
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	7b12      	ldrb	r2, [r2, #12]
 8000498:	0412      	lsls	r2, r2, #16
 800049a:	4611      	mov	r1, r2
 800049c:	7afa      	ldrb	r2, [r7, #11]
 800049e:	4319      	orrs	r1, r3
 80004a0:	68f8      	ldr	r0, [r7, #12]
 80004a2:	4613      	mov	r3, r2
 80004a4:	005b      	lsls	r3, r3, #1
 80004a6:	4413      	add	r3, r2
 80004a8:	00db      	lsls	r3, r3, #3
 80004aa:	4403      	add	r3, r0
 80004ac:	3310      	adds	r3, #16
 80004ae:	6019      	str	r1, [r3, #0]

	/* apply burst configurations */
	DMA_ptr->S[stream_idx].CR |= (streamConfig_ptr->burst.memory_beats << 23)
 80004b0:	7afa      	ldrb	r2, [r7, #11]
 80004b2:	68f9      	ldr	r1, [r7, #12]
 80004b4:	4613      	mov	r3, r2
 80004b6:	005b      	lsls	r3, r3, #1
 80004b8:	4413      	add	r3, r2
 80004ba:	00db      	lsls	r3, r3, #3
 80004bc:	440b      	add	r3, r1
 80004be:	3310      	adds	r3, #16
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	7b52      	ldrb	r2, [r2, #13]
 80004c6:	05d1      	lsls	r1, r2, #23
								|(streamConfig_ptr->burst.peripheral_beats << 21);
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	7b92      	ldrb	r2, [r2, #14]
 80004cc:	0552      	lsls	r2, r2, #21
 80004ce:	430a      	orrs	r2, r1
 80004d0:	4611      	mov	r1, r2
	DMA_ptr->S[stream_idx].CR |= (streamConfig_ptr->burst.memory_beats << 23)
 80004d2:	7afa      	ldrb	r2, [r7, #11]
 80004d4:	4319      	orrs	r1, r3
 80004d6:	68f8      	ldr	r0, [r7, #12]
 80004d8:	4613      	mov	r3, r2
 80004da:	005b      	lsls	r3, r3, #1
 80004dc:	4413      	add	r3, r2
 80004de:	00db      	lsls	r3, r3, #3
 80004e0:	4403      	add	r3, r0
 80004e2:	3310      	adds	r3, #16
 80004e4:	6019      	str	r1, [r3, #0]

	/* specify the fifo threshold */
	DMA_ptr->S[stream_idx].FCR |= streamConfig_ptr->fifo_threshold;
 80004e6:	7afa      	ldrb	r2, [r7, #11]
 80004e8:	68f9      	ldr	r1, [r7, #12]
 80004ea:	4613      	mov	r3, r2
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	4413      	add	r3, r2
 80004f0:	00db      	lsls	r3, r3, #3
 80004f2:	440b      	add	r3, r1
 80004f4:	3324      	adds	r3, #36	; 0x24
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	7e52      	ldrb	r2, [r2, #25]
 80004fc:	4611      	mov	r1, r2
 80004fe:	7afa      	ldrb	r2, [r7, #11]
 8000500:	4319      	orrs	r1, r3
 8000502:	68f8      	ldr	r0, [r7, #12]
 8000504:	4613      	mov	r3, r2
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	4413      	add	r3, r2
 800050a:	00db      	lsls	r3, r3, #3
 800050c:	4403      	add	r3, r0
 800050e:	3324      	adds	r3, #36	; 0x24
 8000510:	6019      	str	r1, [r3, #0]

	/* apply the transfer direction */
	DMA_ptr->S[stream_idx].CR |= (streamConfig_ptr->transfer_direction << 6);
 8000512:	7afa      	ldrb	r2, [r7, #11]
 8000514:	68f9      	ldr	r1, [r7, #12]
 8000516:	4613      	mov	r3, r2
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	4413      	add	r3, r2
 800051c:	00db      	lsls	r3, r3, #3
 800051e:	440b      	add	r3, r1
 8000520:	3310      	adds	r3, #16
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	7a92      	ldrb	r2, [r2, #10]
 8000528:	0192      	lsls	r2, r2, #6
 800052a:	4611      	mov	r1, r2
 800052c:	7afa      	ldrb	r2, [r7, #11]
 800052e:	4319      	orrs	r1, r3
 8000530:	68f8      	ldr	r0, [r7, #12]
 8000532:	4613      	mov	r3, r2
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	4413      	add	r3, r2
 8000538:	00db      	lsls	r3, r3, #3
 800053a:	4403      	add	r3, r0
 800053c:	3310      	adds	r3, #16
 800053e:	6019      	str	r1, [r3, #0]

	if((streamConfig_ptr->transfer_direction == PERIPHERAL_TO_MEMORY)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	7a9b      	ldrb	r3, [r3, #10]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d004      	beq.n	8000552 <DMA_voidConfigureStream+0x34e>
		||  (streamConfig_ptr->transfer_direction == MEMORY_TO_PERIPHERAL)){
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	7a9b      	ldrb	r3, [r3, #10]
 800054c:	2b01      	cmp	r3, #1
 800054e:	f040 808d 	bne.w	800066c <DMA_voidConfigureStream+0x468>
		/* apply the flow controller config */
		DMA_ptr->S[stream_idx].CR |= (streamConfig_ptr->flow_controller << 5);
 8000552:	7afa      	ldrb	r2, [r7, #11]
 8000554:	68f9      	ldr	r1, [r7, #12]
 8000556:	4613      	mov	r3, r2
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	4413      	add	r3, r2
 800055c:	00db      	lsls	r3, r3, #3
 800055e:	440b      	add	r3, r1
 8000560:	3310      	adds	r3, #16
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	7e92      	ldrb	r2, [r2, #26]
 8000568:	0152      	lsls	r2, r2, #5
 800056a:	4611      	mov	r1, r2
 800056c:	7afa      	ldrb	r2, [r7, #11]
 800056e:	4319      	orrs	r1, r3
 8000570:	68f8      	ldr	r0, [r7, #12]
 8000572:	4613      	mov	r3, r2
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	4413      	add	r3, r2
 8000578:	00db      	lsls	r3, r3, #3
 800057a:	4403      	add	r3, r0
 800057c:	3310      	adds	r3, #16
 800057e:	6019      	str	r1, [r3, #0]

		/* apply direct mode config */
		DMA_ptr->S[stream_idx].FCR &= ~(0x3 << 2);
 8000580:	7afa      	ldrb	r2, [r7, #11]
 8000582:	68f9      	ldr	r1, [r7, #12]
 8000584:	4613      	mov	r3, r2
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	4413      	add	r3, r2
 800058a:	00db      	lsls	r3, r3, #3
 800058c:	440b      	add	r3, r1
 800058e:	3324      	adds	r3, #36	; 0x24
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	7afa      	ldrb	r2, [r7, #11]
 8000594:	f023 010c 	bic.w	r1, r3, #12
 8000598:	68f8      	ldr	r0, [r7, #12]
 800059a:	4613      	mov	r3, r2
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	4413      	add	r3, r2
 80005a0:	00db      	lsls	r3, r3, #3
 80005a2:	4403      	add	r3, r0
 80005a4:	3324      	adds	r3, #36	; 0x24
 80005a6:	6019      	str	r1, [r3, #0]
		DMA_ptr->S[stream_idx].FCR |= (streamConfig_ptr->direct_mode << 2);
 80005a8:	7afa      	ldrb	r2, [r7, #11]
 80005aa:	68f9      	ldr	r1, [r7, #12]
 80005ac:	4613      	mov	r3, r2
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	4413      	add	r3, r2
 80005b2:	00db      	lsls	r3, r3, #3
 80005b4:	440b      	add	r3, r1
 80005b6:	3324      	adds	r3, #36	; 0x24
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	7ed2      	ldrb	r2, [r2, #27]
 80005be:	0092      	lsls	r2, r2, #2
 80005c0:	4611      	mov	r1, r2
 80005c2:	7afa      	ldrb	r2, [r7, #11]
 80005c4:	4319      	orrs	r1, r3
 80005c6:	68f8      	ldr	r0, [r7, #12]
 80005c8:	4613      	mov	r3, r2
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	4413      	add	r3, r2
 80005ce:	00db      	lsls	r3, r3, #3
 80005d0:	4403      	add	r3, r0
 80005d2:	3324      	adds	r3, #36	; 0x24
 80005d4:	6019      	str	r1, [r3, #0]

		/* apply circular mode config */
		DMA_ptr->S[stream_idx].CR |= (streamConfig_ptr->circular_mode << 8);
 80005d6:	7afa      	ldrb	r2, [r7, #11]
 80005d8:	68f9      	ldr	r1, [r7, #12]
 80005da:	4613      	mov	r3, r2
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	4413      	add	r3, r2
 80005e0:	00db      	lsls	r3, r3, #3
 80005e2:	440b      	add	r3, r1
 80005e4:	3310      	adds	r3, #16
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	7c52      	ldrb	r2, [r2, #17]
 80005ec:	0212      	lsls	r2, r2, #8
 80005ee:	4611      	mov	r1, r2
 80005f0:	7afa      	ldrb	r2, [r7, #11]
 80005f2:	4319      	orrs	r1, r3
 80005f4:	68f8      	ldr	r0, [r7, #12]
 80005f6:	4613      	mov	r3, r2
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	4413      	add	r3, r2
 80005fc:	00db      	lsls	r3, r3, #3
 80005fe:	4403      	add	r3, r0
 8000600:	3310      	adds	r3, #16
 8000602:	6019      	str	r1, [r3, #0]

		if(streamConfig_ptr->transfer_direction == PERIPHERAL_TO_MEMORY){
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	7a9b      	ldrb	r3, [r3, #10]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d117      	bne.n	800063c <DMA_voidConfigureStream+0x438>
			/* set the addresses src and destination */
			DMA_ptr->S[stream_idx].PAR = streamConfig_ptr->src_address;
 800060c:	7afb      	ldrb	r3, [r7, #11]
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	6811      	ldr	r1, [r2, #0]
 8000612:	68f8      	ldr	r0, [r7, #12]
 8000614:	1c5a      	adds	r2, r3, #1
 8000616:	4613      	mov	r3, r2
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	4413      	add	r3, r2
 800061c:	00db      	lsls	r3, r3, #3
 800061e:	4403      	add	r3, r0
 8000620:	6019      	str	r1, [r3, #0]
			DMA_ptr->S[stream_idx].M0AR = streamConfig_ptr->dest_address;
 8000622:	7afb      	ldrb	r3, [r7, #11]
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	6851      	ldr	r1, [r2, #4]
 8000628:	68f8      	ldr	r0, [r7, #12]
 800062a:	1c5a      	adds	r2, r3, #1
 800062c:	4613      	mov	r3, r2
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	4413      	add	r3, r2
 8000632:	00db      	lsls	r3, r3, #3
 8000634:	4403      	add	r3, r0
 8000636:	3304      	adds	r3, #4
 8000638:	6019      	str	r1, [r3, #0]
		if(streamConfig_ptr->transfer_direction == PERIPHERAL_TO_MEMORY){
 800063a:	e06e      	b.n	800071a <DMA_voidConfigureStream+0x516>
		}
		else{
			/* set the addresses src and destination */
			DMA_ptr->S[stream_idx].M0AR = streamConfig_ptr->src_address;
 800063c:	7afb      	ldrb	r3, [r7, #11]
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	6811      	ldr	r1, [r2, #0]
 8000642:	68f8      	ldr	r0, [r7, #12]
 8000644:	1c5a      	adds	r2, r3, #1
 8000646:	4613      	mov	r3, r2
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	4413      	add	r3, r2
 800064c:	00db      	lsls	r3, r3, #3
 800064e:	4403      	add	r3, r0
 8000650:	3304      	adds	r3, #4
 8000652:	6019      	str	r1, [r3, #0]
			DMA_ptr->S[stream_idx].PAR = streamConfig_ptr->dest_address;
 8000654:	7afb      	ldrb	r3, [r7, #11]
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	6851      	ldr	r1, [r2, #4]
 800065a:	68f8      	ldr	r0, [r7, #12]
 800065c:	1c5a      	adds	r2, r3, #1
 800065e:	4613      	mov	r3, r2
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	4413      	add	r3, r2
 8000664:	00db      	lsls	r3, r3, #3
 8000666:	4403      	add	r3, r0
 8000668:	6019      	str	r1, [r3, #0]
		if(streamConfig_ptr->transfer_direction == PERIPHERAL_TO_MEMORY){
 800066a:	e056      	b.n	800071a <DMA_voidConfigureStream+0x516>
		}

	}
	else if(streamConfig_ptr->transfer_direction == MEMORY_TO_MEMORY){
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	7a9b      	ldrb	r3, [r3, #10]
 8000670:	2b02      	cmp	r3, #2
 8000672:	d152      	bne.n	800071a <DMA_voidConfigureStream+0x516>
		/*select DMA flow controller */
		CLR_BIT(DMA_ptr->S[stream_idx].CR, 5);
 8000674:	7afa      	ldrb	r2, [r7, #11]
 8000676:	68f9      	ldr	r1, [r7, #12]
 8000678:	4613      	mov	r3, r2
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	4413      	add	r3, r2
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	440b      	add	r3, r1
 8000682:	3310      	adds	r3, #16
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	7afa      	ldrb	r2, [r7, #11]
 8000688:	f023 0120 	bic.w	r1, r3, #32
 800068c:	68f8      	ldr	r0, [r7, #12]
 800068e:	4613      	mov	r3, r2
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	4413      	add	r3, r2
 8000694:	00db      	lsls	r3, r3, #3
 8000696:	4403      	add	r3, r0
 8000698:	3310      	adds	r3, #16
 800069a:	6019      	str	r1, [r3, #0]

		/* select indirect mode */
		SET_BIT(DMA_ptr->S[stream_idx].FCR, 2);
 800069c:	7afa      	ldrb	r2, [r7, #11]
 800069e:	68f9      	ldr	r1, [r7, #12]
 80006a0:	4613      	mov	r3, r2
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	4413      	add	r3, r2
 80006a6:	00db      	lsls	r3, r3, #3
 80006a8:	440b      	add	r3, r1
 80006aa:	3324      	adds	r3, #36	; 0x24
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	7afa      	ldrb	r2, [r7, #11]
 80006b0:	f043 0104 	orr.w	r1, r3, #4
 80006b4:	68f8      	ldr	r0, [r7, #12]
 80006b6:	4613      	mov	r3, r2
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	4413      	add	r3, r2
 80006bc:	00db      	lsls	r3, r3, #3
 80006be:	4403      	add	r3, r0
 80006c0:	3324      	adds	r3, #36	; 0x24
 80006c2:	6019      	str	r1, [r3, #0]

		/* disable circular mode */
		CLR_BIT(DMA_ptr->S[stream_idx].CR, 8);
 80006c4:	7afa      	ldrb	r2, [r7, #11]
 80006c6:	68f9      	ldr	r1, [r7, #12]
 80006c8:	4613      	mov	r3, r2
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	4413      	add	r3, r2
 80006ce:	00db      	lsls	r3, r3, #3
 80006d0:	440b      	add	r3, r1
 80006d2:	3310      	adds	r3, #16
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	7afa      	ldrb	r2, [r7, #11]
 80006d8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80006dc:	68f8      	ldr	r0, [r7, #12]
 80006de:	4613      	mov	r3, r2
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	4413      	add	r3, r2
 80006e4:	00db      	lsls	r3, r3, #3
 80006e6:	4403      	add	r3, r0
 80006e8:	3310      	adds	r3, #16
 80006ea:	6019      	str	r1, [r3, #0]

		/* set the addresses src and destination */
		DMA_ptr->S[stream_idx].PAR = streamConfig_ptr->src_address;
 80006ec:	7afb      	ldrb	r3, [r7, #11]
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	6811      	ldr	r1, [r2, #0]
 80006f2:	68f8      	ldr	r0, [r7, #12]
 80006f4:	1c5a      	adds	r2, r3, #1
 80006f6:	4613      	mov	r3, r2
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	4413      	add	r3, r2
 80006fc:	00db      	lsls	r3, r3, #3
 80006fe:	4403      	add	r3, r0
 8000700:	6019      	str	r1, [r3, #0]
		DMA_ptr->S[stream_idx].M0AR = streamConfig_ptr->dest_address;
 8000702:	7afb      	ldrb	r3, [r7, #11]
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	6851      	ldr	r1, [r2, #4]
 8000708:	68f8      	ldr	r0, [r7, #12]
 800070a:	1c5a      	adds	r2, r3, #1
 800070c:	4613      	mov	r3, r2
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	4413      	add	r3, r2
 8000712:	00db      	lsls	r3, r3, #3
 8000714:	4403      	add	r3, r0
 8000716:	3304      	adds	r3, #4
 8000718:	6019      	str	r1, [r3, #0]
	}

	return SUCCESS;
 800071a:	2300      	movs	r3, #0
}
 800071c:	4618      	mov	r0, r3
 800071e:	371c      	adds	r7, #28
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <DMA_voidStartTransfer>:


void DMA_voidStartTransfer(DMA_dtype* DMA_ptr, u8 stream_idx){
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	460b      	mov	r3, r1
 8000732:	70fb      	strb	r3, [r7, #3]
	SET_BIT(DMA_ptr->S[stream_idx].CR, 0);
 8000734:	78fa      	ldrb	r2, [r7, #3]
 8000736:	6879      	ldr	r1, [r7, #4]
 8000738:	4613      	mov	r3, r2
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	4413      	add	r3, r2
 800073e:	00db      	lsls	r3, r3, #3
 8000740:	440b      	add	r3, r1
 8000742:	3310      	adds	r3, #16
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	78fa      	ldrb	r2, [r7, #3]
 8000748:	f043 0101 	orr.w	r1, r3, #1
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	4613      	mov	r3, r2
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	4413      	add	r3, r2
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	4403      	add	r3, r0
 8000758:	3310      	adds	r3, #16
 800075a:	6019      	str	r1, [r3, #0]
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <GPIO_Init>:
#include "gpio.h"



void GPIO_Init( char port_id, unsigned int PIN_NO, unsigned int PIN_Dir, unsigned int Default_State, unsigned char Pulling_State)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	60b9      	str	r1, [r7, #8]
 8000770:	607a      	str	r2, [r7, #4]
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	4603      	mov	r3, r0
 8000776:	73fb      	strb	r3, [r7, #15]
	port_id -= 'A';
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	3b41      	subs	r3, #65	; 0x41
 800077c:	73fb      	strb	r3, [r7, #15]
	//enable clock of port
	RCC_AHB1ENR |= (0x01 <<port_id);
 800077e:	4b58      	ldr	r3, [pc, #352]	; (80008e0 <GPIO_Init+0x178>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	7bfa      	ldrb	r2, [r7, #15]
 8000784:	2101      	movs	r1, #1
 8000786:	fa01 f202 	lsl.w	r2, r1, r2
 800078a:	4611      	mov	r1, r2
 800078c:	4a54      	ldr	r2, [pc, #336]	; (80008e0 <GPIO_Init+0x178>)
 800078e:	430b      	orrs	r3, r1
 8000790:	6013      	str	r3, [r2, #0]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2b03      	cmp	r3, #3
 8000796:	d854      	bhi.n	8000842 <GPIO_Init+0xda>
 8000798:	a201      	add	r2, pc, #4	; (adr r2, 80007a0 <GPIO_Init+0x38>)
 800079a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079e:	bf00      	nop
 80007a0:	080007b1 	.word	0x080007b1
 80007a4:	080007d7 	.word	0x080007d7
 80007a8:	080007fb 	.word	0x080007fb
 80007ac:	0800081f 	.word	0x0800081f
	//configure moder register for pin direction
	switch(PIN_Dir)
	{
		case (INPUT):
				GPIO_MODER(port_id) &= ~(0x03 << 2*PIN_NO);
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	4a4c      	ldr	r2, [pc, #304]	; (80008e4 <GPIO_Init+0x17c>)
 80007b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	68ba      	ldr	r2, [r7, #8]
 80007bc:	0052      	lsls	r2, r2, #1
 80007be:	2103      	movs	r1, #3
 80007c0:	fa01 f202 	lsl.w	r2, r1, r2
 80007c4:	43d2      	mvns	r2, r2
 80007c6:	4610      	mov	r0, r2
 80007c8:	7bfa      	ldrb	r2, [r7, #15]
 80007ca:	4946      	ldr	r1, [pc, #280]	; (80008e4 <GPIO_Init+0x17c>)
 80007cc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80007d0:	4003      	ands	r3, r0
 80007d2:	6013      	str	r3, [r2, #0]
		break;
 80007d4:	e035      	b.n	8000842 <GPIO_Init+0xda>
		case (OUTPUT):
				GPIO_MODER(port_id) |= (0x01 << 2*PIN_NO);
 80007d6:	7bfb      	ldrb	r3, [r7, #15]
 80007d8:	4a42      	ldr	r2, [pc, #264]	; (80008e4 <GPIO_Init+0x17c>)
 80007da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	68ba      	ldr	r2, [r7, #8]
 80007e2:	0052      	lsls	r2, r2, #1
 80007e4:	2101      	movs	r1, #1
 80007e6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ea:	4610      	mov	r0, r2
 80007ec:	7bfa      	ldrb	r2, [r7, #15]
 80007ee:	493d      	ldr	r1, [pc, #244]	; (80008e4 <GPIO_Init+0x17c>)
 80007f0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80007f4:	4303      	orrs	r3, r0
 80007f6:	6013      	str	r3, [r2, #0]
		break;
 80007f8:	e023      	b.n	8000842 <GPIO_Init+0xda>
		case (ALTERNATE_FUN):
				GPIO_MODER(port_id) |= (0x02 << 2*PIN_NO);
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	4a39      	ldr	r2, [pc, #228]	; (80008e4 <GPIO_Init+0x17c>)
 80007fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	68ba      	ldr	r2, [r7, #8]
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	2102      	movs	r1, #2
 800080a:	fa01 f202 	lsl.w	r2, r1, r2
 800080e:	4610      	mov	r0, r2
 8000810:	7bfa      	ldrb	r2, [r7, #15]
 8000812:	4934      	ldr	r1, [pc, #208]	; (80008e4 <GPIO_Init+0x17c>)
 8000814:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000818:	4303      	orrs	r3, r0
 800081a:	6013      	str	r3, [r2, #0]
		break;
 800081c:	e011      	b.n	8000842 <GPIO_Init+0xda>
		case (ANALOG):
				GPIO_MODER(port_id) |= (0x03 << 2*PIN_NO);
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	4a30      	ldr	r2, [pc, #192]	; (80008e4 <GPIO_Init+0x17c>)
 8000822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	68ba      	ldr	r2, [r7, #8]
 800082a:	0052      	lsls	r2, r2, #1
 800082c:	2103      	movs	r1, #3
 800082e:	fa01 f202 	lsl.w	r2, r1, r2
 8000832:	4610      	mov	r0, r2
 8000834:	7bfa      	ldrb	r2, [r7, #15]
 8000836:	492b      	ldr	r1, [pc, #172]	; (80008e4 <GPIO_Init+0x17c>)
 8000838:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800083c:	4303      	orrs	r3, r0
 800083e:	6013      	str	r3, [r2, #0]
		break;
 8000840:	bf00      	nop
	}// end switch
	//configure default state
	switch(Default_State)
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d003      	beq.n	8000850 <GPIO_Init+0xe8>
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d014      	beq.n	8000878 <GPIO_Init+0x110>
 800084e:	e026      	b.n	800089e <GPIO_Init+0x136>
	{
		case(PUSH_PULL):
				GPIO_OTYPER(port_id) &= ~(0x01<<PIN_NO);
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	4a24      	ldr	r2, [pc, #144]	; (80008e4 <GPIO_Init+0x17c>)
 8000854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000858:	3304      	adds	r3, #4
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2101      	movs	r1, #1
 800085e:	68ba      	ldr	r2, [r7, #8]
 8000860:	fa01 f202 	lsl.w	r2, r1, r2
 8000864:	43d2      	mvns	r2, r2
 8000866:	4610      	mov	r0, r2
 8000868:	7bfa      	ldrb	r2, [r7, #15]
 800086a:	491e      	ldr	r1, [pc, #120]	; (80008e4 <GPIO_Init+0x17c>)
 800086c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000870:	3204      	adds	r2, #4
 8000872:	4003      	ands	r3, r0
 8000874:	6013      	str	r3, [r2, #0]
		break;
 8000876:	e012      	b.n	800089e <GPIO_Init+0x136>
		case(OPEN_DRAIN):
				GPIO_OTYPER(port_id) |= (0x01<<PIN_NO);
 8000878:	7bfb      	ldrb	r3, [r7, #15]
 800087a:	4a1a      	ldr	r2, [pc, #104]	; (80008e4 <GPIO_Init+0x17c>)
 800087c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000880:	3304      	adds	r3, #4
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2101      	movs	r1, #1
 8000886:	68ba      	ldr	r2, [r7, #8]
 8000888:	fa01 f202 	lsl.w	r2, r1, r2
 800088c:	4610      	mov	r0, r2
 800088e:	7bfa      	ldrb	r2, [r7, #15]
 8000890:	4914      	ldr	r1, [pc, #80]	; (80008e4 <GPIO_Init+0x17c>)
 8000892:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000896:	3204      	adds	r2, #4
 8000898:	4303      	orrs	r3, r0
 800089a:	6013      	str	r3, [r2, #0]
		break;
 800089c:	bf00      	nop
	}//end switch

	GPIO_PUPDR(port_id) = (GPIO_PUPDR(port_id) & ~(0x3 << 2 * PIN_NO)) | (Pulling_State << 2 * PIN_NO);
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	4a10      	ldr	r2, [pc, #64]	; (80008e4 <GPIO_Init+0x17c>)
 80008a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a6:	330c      	adds	r3, #12
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	68ba      	ldr	r2, [r7, #8]
 80008ac:	0052      	lsls	r2, r2, #1
 80008ae:	2103      	movs	r1, #3
 80008b0:	fa01 f202 	lsl.w	r2, r1, r2
 80008b4:	43d2      	mvns	r2, r2
 80008b6:	4013      	ands	r3, r2
 80008b8:	7e39      	ldrb	r1, [r7, #24]
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	0052      	lsls	r2, r2, #1
 80008be:	fa01 f202 	lsl.w	r2, r1, r2
 80008c2:	4610      	mov	r0, r2
 80008c4:	7bfa      	ldrb	r2, [r7, #15]
 80008c6:	4907      	ldr	r1, [pc, #28]	; (80008e4 <GPIO_Init+0x17c>)
 80008c8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80008cc:	320c      	adds	r2, #12
 80008ce:	4303      	orrs	r3, r0
 80008d0:	6013      	str	r3, [r2, #0]
}
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40023830 	.word	0x40023830
 80008e4:	20000000 	.word	0x20000000

080008e8 <GPIO_WritePin>:

unsigned char GPIO_WritePin(char port_id, unsigned int PIN_NO, unsigned int Data)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b087      	sub	sp, #28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
 80008f4:	73fb      	strb	r3, [r7, #15]
	port_id -= 'A';
 80008f6:	7bfb      	ldrb	r3, [r7, #15]
 80008f8:	3b41      	subs	r3, #65	; 0x41
 80008fa:	73fb      	strb	r3, [r7, #15]
	unsigned char result;
	if((GPIO_MODER(port_id) & (0x03 << 2*PIN_NO)) >> (2*PIN_NO) == 1)
 80008fc:	7bfb      	ldrb	r3, [r7, #15]
 80008fe:	4a22      	ldr	r2, [pc, #136]	; (8000988 <GPIO_WritePin+0xa0>)
 8000900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	68ba      	ldr	r2, [r7, #8]
 8000908:	0052      	lsls	r2, r2, #1
 800090a:	2103      	movs	r1, #3
 800090c:	fa01 f202 	lsl.w	r2, r1, r2
 8000910:	401a      	ands	r2, r3
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	fa22 f303 	lsr.w	r3, r2, r3
 800091a:	2b01      	cmp	r3, #1
 800091c:	d12b      	bne.n	8000976 <GPIO_WritePin+0x8e>
	{
		 if(Data)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d012      	beq.n	800094a <GPIO_WritePin+0x62>
		 {
			 GPIO_ODR(port_id) |= (1<<PIN_NO);
 8000924:	7bfb      	ldrb	r3, [r7, #15]
 8000926:	4a18      	ldr	r2, [pc, #96]	; (8000988 <GPIO_WritePin+0xa0>)
 8000928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800092c:	3314      	adds	r3, #20
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2101      	movs	r1, #1
 8000932:	68ba      	ldr	r2, [r7, #8]
 8000934:	fa01 f202 	lsl.w	r2, r1, r2
 8000938:	4610      	mov	r0, r2
 800093a:	7bfa      	ldrb	r2, [r7, #15]
 800093c:	4912      	ldr	r1, [pc, #72]	; (8000988 <GPIO_WritePin+0xa0>)
 800093e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000942:	3214      	adds	r2, #20
 8000944:	4303      	orrs	r3, r0
 8000946:	6013      	str	r3, [r2, #0]
 8000948:	e012      	b.n	8000970 <GPIO_WritePin+0x88>
		 }
		 else
		 {
			 GPIO_ODR(port_id) &= ~(1<<PIN_NO);
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	4a0e      	ldr	r2, [pc, #56]	; (8000988 <GPIO_WritePin+0xa0>)
 800094e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000952:	3314      	adds	r3, #20
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2101      	movs	r1, #1
 8000958:	68ba      	ldr	r2, [r7, #8]
 800095a:	fa01 f202 	lsl.w	r2, r1, r2
 800095e:	43d2      	mvns	r2, r2
 8000960:	4610      	mov	r0, r2
 8000962:	7bfa      	ldrb	r2, [r7, #15]
 8000964:	4908      	ldr	r1, [pc, #32]	; (8000988 <GPIO_WritePin+0xa0>)
 8000966:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800096a:	3214      	adds	r2, #20
 800096c:	4003      	ands	r3, r0
 800096e:	6013      	str	r3, [r2, #0]
		 }
		result = OK;
 8000970:	2300      	movs	r3, #0
 8000972:	75fb      	strb	r3, [r7, #23]
 8000974:	e001      	b.n	800097a <GPIO_WritePin+0x92>
	}
	else
	{
		result = NOK;
 8000976:	2301      	movs	r3, #1
 8000978:	75fb      	strb	r3, [r7, #23]
	}
	return result;
 800097a:	7dfb      	ldrb	r3, [r7, #23]
}
 800097c:	4618      	mov	r0, r3
 800097e:	371c      	adds	r7, #28
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	20000000 	.word	0x20000000

0800098c <DMA2_Stream0_IRQHandler>:
#include "dma.h"

u32 arr1[100] = {4, 5, 5, 8, 7, 9, 9, 6};		/* 4 5 5 8 7 9 9 6 0000. */
u32 arr2[100] = {0};

void DMA2_Stream0_IRQHandler(void){
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
	for(u8 i = 0; i < 8; i++){
 8000992:	2300      	movs	r3, #0
 8000994:	71fb      	strb	r3, [r7, #7]
 8000996:	e012      	b.n	80009be <DMA2_Stream0_IRQHandler+0x32>
		if(arr1[i] == arr2[i]){
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	4a0d      	ldr	r2, [pc, #52]	; (80009d0 <DMA2_Stream0_IRQHandler+0x44>)
 800099c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	490c      	ldr	r1, [pc, #48]	; (80009d4 <DMA2_Stream0_IRQHandler+0x48>)
 80009a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d105      	bne.n	80009b8 <DMA2_Stream0_IRQHandler+0x2c>
			GPIO_WritePin('A', i, HIGH);
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	2201      	movs	r2, #1
 80009b0:	4619      	mov	r1, r3
 80009b2:	2041      	movs	r0, #65	; 0x41
 80009b4:	f7ff ff98 	bl	80008e8 <GPIO_WritePin>
	for(u8 i = 0; i < 8; i++){
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	3301      	adds	r3, #1
 80009bc:	71fb      	strb	r3, [r7, #7]
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	2b07      	cmp	r3, #7
 80009c2:	d9e9      	bls.n	8000998 <DMA2_Stream0_IRQHandler+0xc>
		}
	}
}
 80009c4:	bf00      	nop
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000018 	.word	0x20000018
 80009d4:	200001c4 	.word	0x200001c4

080009d8 <dma_stream0_init>:

void dma_stream0_init(void){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0
	streamCofig_dtype stream0_config;

	stream0_config.dest_address 						= (u32)arr2;
 80009de:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <dma_stream0_init+0x88>)
 80009e0:	60bb      	str	r3, [r7, #8]
	stream0_config.src_address 							= (u32)arr1;
 80009e2:	4b20      	ldr	r3, [pc, #128]	; (8000a64 <dma_stream0_init+0x8c>)
 80009e4:	607b      	str	r3, [r7, #4]
	stream0_config.circular_mode 						= DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	757b      	strb	r3, [r7, #21]
	stream0_config.channel_number 						= 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	73fb      	strb	r3, [r7, #15]
	stream0_config.burst.memory_beats 					= SINGLE_TRANSFER;
 80009ee:	2300      	movs	r3, #0
 80009f0:	747b      	strb	r3, [r7, #17]
	stream0_config.burst.peripheral_beats 				= SINGLE_TRANSFER;
 80009f2:	2300      	movs	r3, #0
 80009f4:	74bb      	strb	r3, [r7, #18]
	stream0_config.direct_mode 							= DIRECT_MODE_DISABLED;
 80009f6:	2301      	movs	r3, #1
 80009f8:	77fb      	strb	r3, [r7, #31]
	stream0_config.fifo_threshold 						= FULL;
 80009fa:	2303      	movs	r3, #3
 80009fc:	777b      	strb	r3, [r7, #29]
	stream0_config.flow_controller 						= DMA_FLOW_CONTROLLER;
 80009fe:	2300      	movs	r3, #0
 8000a00:	77bb      	strb	r3, [r7, #30]
	stream0_config.memory_ptr_mode 						= INCREMENT;
 8000a02:	2301      	movs	r3, #1
 8000a04:	75bb      	strb	r3, [r7, #22]
	stream0_config.peripheral_ptr_mode 					= INCREMENT;
 8000a06:	2301      	movs	r3, #1
 8000a08:	75fb      	strb	r3, [r7, #23]
	stream0_config.memory_size 							= FOUR_BYTES;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	74fb      	strb	r3, [r7, #19]
	stream0_config.peripheral_size 						= FOUR_BYTES;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	753b      	strb	r3, [r7, #20]
	stream0_config.number_of_transactions 				= 100;
 8000a12:	2364      	movs	r3, #100	; 0x64
 8000a14:	81bb      	strh	r3, [r7, #12]
	stream0_config.stream_priority 						= VERY_HIGH_PRIORITY;
 8000a16:	2303      	movs	r3, #3
 8000a18:	743b      	strb	r3, [r7, #16]
	stream0_config.transfer_direction 					= MEMORY_TO_MEMORY;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	73bb      	strb	r3, [r7, #14]
	stream0_config.transfer_error_interrupt_enable 		= DISABLE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	76bb      	strb	r3, [r7, #26]
	stream0_config.direct_mode_error_interrupt_enable 	= DISABLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	76fb      	strb	r3, [r7, #27]
	stream0_config.fifo_error_interrupt_enable 			= DISABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	773b      	strb	r3, [r7, #28]
	stream0_config.half_transfer_interrupt_enable 		= DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	767b      	strb	r3, [r7, #25]
	stream0_config.transfer_error_interrupt_enable		= DISABLE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	76bb      	strb	r3, [r7, #26]
	stream0_config.transfer_interrupt_enable 			= ENABLE;
 8000a32:	2301      	movs	r3, #1
 8000a34:	763b      	strb	r3, [r7, #24]

	DMA_voidInit(DMA2);
 8000a36:	480c      	ldr	r0, [pc, #48]	; (8000a68 <dma_stream0_init+0x90>)
 8000a38:	f7ff fbcc 	bl	80001d4 <DMA_voidInit>
	DMA_voidConfigureStream(DMA2, 0, &stream0_config);
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	461a      	mov	r2, r3
 8000a40:	2100      	movs	r1, #0
 8000a42:	4809      	ldr	r0, [pc, #36]	; (8000a68 <dma_stream0_init+0x90>)
 8000a44:	f7ff fbde 	bl	8000204 <DMA_voidConfigureStream>
	NVIC_voidEnableInterrupt(_DMA2_STREAM2_VECTOR_IRQ);
 8000a48:	2038      	movs	r0, #56	; 0x38
 8000a4a:	f000 f855 	bl	8000af8 <NVIC_voidEnableInterrupt>
	DMA_voidStartTransfer(DMA2, 0);
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <dma_stream0_init+0x90>)
 8000a52:	f7ff fe69 	bl	8000728 <DMA_voidStartTransfer>
}
 8000a56:	bf00      	nop
 8000a58:	3720      	adds	r7, #32
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200001c4 	.word	0x200001c4
 8000a64:	20000018 	.word	0x20000018
 8000a68:	40026400 	.word	0x40026400

08000a6c <main>:


int main(void) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af02      	add	r7, sp, #8
	GPIO_Init('A', P0, OUTPUT, PUSH_PULL, NO_PULLING);
 8000a72:	2300      	movs	r3, #0
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	2300      	movs	r3, #0
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	2041      	movs	r0, #65	; 0x41
 8000a7e:	f7ff fe73 	bl	8000768 <GPIO_Init>
	GPIO_Init('A', P1, OUTPUT, PUSH_PULL, NO_PULLING);
 8000a82:	2300      	movs	r3, #0
 8000a84:	9300      	str	r3, [sp, #0]
 8000a86:	2300      	movs	r3, #0
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	2041      	movs	r0, #65	; 0x41
 8000a8e:	f7ff fe6b 	bl	8000768 <GPIO_Init>
	GPIO_Init('A', P2, OUTPUT, PUSH_PULL, NO_PULLING);
 8000a92:	2300      	movs	r3, #0
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	2300      	movs	r3, #0
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	2041      	movs	r0, #65	; 0x41
 8000a9e:	f7ff fe63 	bl	8000768 <GPIO_Init>
	GPIO_Init('A', P3, OUTPUT, PUSH_PULL, NO_PULLING);
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2103      	movs	r1, #3
 8000aac:	2041      	movs	r0, #65	; 0x41
 8000aae:	f7ff fe5b 	bl	8000768 <GPIO_Init>
	GPIO_Init('A', P4, OUTPUT, PUSH_PULL, NO_PULLING);
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2104      	movs	r1, #4
 8000abc:	2041      	movs	r0, #65	; 0x41
 8000abe:	f7ff fe53 	bl	8000768 <GPIO_Init>
	GPIO_Init('A', P5, OUTPUT, PUSH_PULL, NO_PULLING);
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2105      	movs	r1, #5
 8000acc:	2041      	movs	r0, #65	; 0x41
 8000ace:	f7ff fe4b 	bl	8000768 <GPIO_Init>
	GPIO_Init('A', P6, OUTPUT, PUSH_PULL, NO_PULLING);
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2106      	movs	r1, #6
 8000adc:	2041      	movs	r0, #65	; 0x41
 8000ade:	f7ff fe43 	bl	8000768 <GPIO_Init>
	GPIO_Init('A', P7, OUTPUT, PUSH_PULL, NO_PULLING);
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2107      	movs	r1, #7
 8000aec:	2041      	movs	r0, #65	; 0x41
 8000aee:	f7ff fe3b 	bl	8000768 <GPIO_Init>

	dma_stream0_init();
 8000af2:	f7ff ff71 	bl	80009d8 <dma_stream0_init>



	while (1) {
 8000af6:	e7fe      	b.n	8000af6 <main+0x8a>

08000af8 <NVIC_voidEnableInterrupt>:
/****	Brief	:	enables the ext interrupt by the NVIC 				****/
/**** 	Return	:	None												****/
/****	param	:	bit number that corresponds to the ext peri			****/
/***************************************************************************/
void NVIC_voidEnableInterrupt(u8 copy_u8IntNumber)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
	NVIC->ISER[copy_u8IntNumber >> 5] = 1 << (copy_u8IntNumber & 0x001F);
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	f003 031f 	and.w	r3, r3, #31
 8000b08:	2201      	movs	r2, #1
 8000b0a:	fa02 f103 	lsl.w	r1, r2, r3
 8000b0e:	4a06      	ldr	r2, [pc, #24]	; (8000b28 <NVIC_voidEnableInterrupt+0x30>)
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	095b      	lsrs	r3, r3, #5
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000e100 	.word	0xe000e100

08000b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b2c:	f8df d030 	ldr.w	sp, [pc, #48]	; 8000b60 <LoopFillZerobss+0xe>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b30:	480c      	ldr	r0, [pc, #48]	; (8000b64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b32:	490d      	ldr	r1, [pc, #52]	; (8000b68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b34:	4a0d      	ldr	r2, [pc, #52]	; (8000b6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b38:	e002      	b.n	8000b40 <LoopCopyDataInit>

08000b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3e:	3304      	adds	r3, #4

08000b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b44:	d3f9      	bcc.n	8000b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b46:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b48:	4c0a      	ldr	r4, [pc, #40]	; (8000b74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b4c:	e001      	b.n	8000b52 <LoopFillZerobss>

08000b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b50:	3204      	adds	r2, #4

08000b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b54:	d3fb      	bcc.n	8000b4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b56:	f000 f811 	bl	8000b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5a:	f7ff ff87 	bl	8000a6c <main>
  bx  lr    
 8000b5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b60:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b68:	200001a8 	.word	0x200001a8
  ldr r2, =_sidata
 8000b6c:	08000be4 	.word	0x08000be4
  ldr r2, =_sbss
 8000b70:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8000b74:	20000354 	.word	0x20000354

08000b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <ADC_IRQHandler>
	...

08000b7c <__libc_init_array>:
 8000b7c:	b570      	push	{r4, r5, r6, lr}
 8000b7e:	4d0d      	ldr	r5, [pc, #52]	; (8000bb4 <__libc_init_array+0x38>)
 8000b80:	4c0d      	ldr	r4, [pc, #52]	; (8000bb8 <__libc_init_array+0x3c>)
 8000b82:	1b64      	subs	r4, r4, r5
 8000b84:	10a4      	asrs	r4, r4, #2
 8000b86:	2600      	movs	r6, #0
 8000b88:	42a6      	cmp	r6, r4
 8000b8a:	d109      	bne.n	8000ba0 <__libc_init_array+0x24>
 8000b8c:	4d0b      	ldr	r5, [pc, #44]	; (8000bbc <__libc_init_array+0x40>)
 8000b8e:	4c0c      	ldr	r4, [pc, #48]	; (8000bc0 <__libc_init_array+0x44>)
 8000b90:	f000 f818 	bl	8000bc4 <_init>
 8000b94:	1b64      	subs	r4, r4, r5
 8000b96:	10a4      	asrs	r4, r4, #2
 8000b98:	2600      	movs	r6, #0
 8000b9a:	42a6      	cmp	r6, r4
 8000b9c:	d105      	bne.n	8000baa <__libc_init_array+0x2e>
 8000b9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ba4:	4798      	blx	r3
 8000ba6:	3601      	adds	r6, #1
 8000ba8:	e7ee      	b.n	8000b88 <__libc_init_array+0xc>
 8000baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bae:	4798      	blx	r3
 8000bb0:	3601      	adds	r6, #1
 8000bb2:	e7f2      	b.n	8000b9a <__libc_init_array+0x1e>
 8000bb4:	08000bdc 	.word	0x08000bdc
 8000bb8:	08000bdc 	.word	0x08000bdc
 8000bbc:	08000bdc 	.word	0x08000bdc
 8000bc0:	08000be0 	.word	0x08000be0

08000bc4 <_init>:
 8000bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bc6:	bf00      	nop
 8000bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bca:	bc08      	pop	{r3}
 8000bcc:	469e      	mov	lr, r3
 8000bce:	4770      	bx	lr

08000bd0 <_fini>:
 8000bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bd2:	bf00      	nop
 8000bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bd6:	bc08      	pop	{r3}
 8000bd8:	469e      	mov	lr, r3
 8000bda:	4770      	bx	lr
